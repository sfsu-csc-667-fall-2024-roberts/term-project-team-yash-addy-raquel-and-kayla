This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-21T04:18:09.202Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitattributes
.gitignore
.husky/pre-commit
eslint.config.mjs
migrations/1734417987149_init.ts
package.json
README.md
src/client/chat.ts
src/client/game-lobby.ts
src/client/games.ts
src/client/games/card-click-handler.ts
src/client/games/create-player-element.ts
src/client/games/get-card-value.ts
src/client/games/index.ts
src/client/games/update-game.ts
src/client/games/update-pile.ts
src/client/main-lobby.ts
src/client/main.js
src/client/main.ts
src/client/types.ts
src/public/css/bundle.css
src/public/css/main.css
src/public/index.html
src/public/js/main.js
src/server/config/database.ts
src/server/config/index.ts
src/server/config/livereload.ts
src/server/config/session.ts
src/server/config/socket.ts
src/server/config/sockets.ts
src/server/constants/gameConfig.ts
src/server/db.ts
src/server/index.js
src/server/index.ts
src/server/middleware/auth.ts
src/server/middleware/authentication.ts
src/server/middleware/chat.ts
src/server/middleware/error.ts
src/server/middleware/index.ts
src/server/middleware/tailwind-util.ts
src/server/middleware/time.js
src/server/middleware/time.ts
src/server/middleware/validationMiddleware.js
src/server/middleware/validationMiddleware.ts
src/server/models/game.ts
src/server/models/user.ts
src/server/routes/auth.ts
src/server/routes/chat.ts
src/server/routes/game-middleware/broadcast-game-update.ts
src/server/routes/game-middleware/can-player-draw.ts
src/server/routes/game-middleware/index.ts
src/server/routes/game-middleware/is-players-turn.ts
src/server/routes/games.ts
src/server/routes/home.ts
src/server/routes/index.ts
src/server/routes/main-lobby.ts
src/server/routes/test.ts
src/server/socket/gameHandlers.ts
src/server/types/express-session.d.ts
src/server/types/socket.ts
src/server/views/auth/login.ejs
src/server/views/auth/register.ejs
src/server/views/games/game.ejs
src/server/views/games/lobby.ejs
src/server/views/games/templates.ejs
src/server/views/home.ejs
src/server/views/main-lobby.ejs
src/server/views/partials/chat.ejs
src/server/views/partials/head.ejs
src/server/views/partials/menu.ejs
src/views/auth/login.ejs
src/views/auth/register.ejs
src/views/games/create-game.ejs
src/views/games/game.ejs
src/views/games/lobby.ejs
src/views/games/templates.ejs
src/views/home.ejs
src/views/home.ejs2
src/views/main-lobby.ejs
src/views/partials/chat.ejs
src/views/partials/head.ejs
src/views/partials/menu.ejs
tailwind.config.ts
tsconfig.json
webpack.config.js
webpack.config.ts
weekly-reports/README.md

================================================================
Repository Files
================================================================

================
File: .gitattributes
================
# Enforce consistent line endings
* text=auto

# Specific file types to always use LF
*.js   text eol=lf
*.ts   text eol=lf
*.json text eol=lf
*.html text eol=lf
*.css  text eol=lf
*.md   text eol=lf
*.yml  text eol=lf

# Binary files - no conversion
*.png binary
*.jpg binary
*.gif binary

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*
db/
# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*node_modules/*
.env

.DS_Store

================
File: .husky/pre-commit
================
npm test
npx lint-staged

================
File: eslint.config.mjs
================
import pluginJs from "@eslint/js";
import eslintConfigPrettier from "eslint-config-prettier";
import globals from "globals";
import tseslint from "typescript-eslint";

export default [
  { files: ["**/*.{js,mjs,cjs,ts}"] },
  { languageOptions: { globals: globals.browser } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  eslintConfigPrettier,
];

================
File: migrations/1734417987149_init.ts
================
import { ColumnDefinitions, MigrationBuilder } from 'node-pg-migrate';

export const shorthands: ColumnDefinitions | undefined = undefined;

export async function up(pgm: MigrationBuilder): Promise<void> {
  // Enable required extensions
  pgm.sql('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"');

  // Cards lookup table
  pgm.createTable("cards", {
    id: { type: 'uuid', primaryKey: true, default: pgm.func('gen_random_uuid()') },
    value: {
      type: "integer",
      notNull: true,
    }
  });

  // Insert card values
  const cards: number[] = [];
  for (let i = 1; i <= 12; i++) {
    cards.push(i);
  }
  const allCards = cards
    .flatMap(() => cards)
    .map((card) => `(gen_random_uuid(), ${card})`)
    .join(", ");

  pgm.sql(`INSERT INTO cards (id, value) VALUES ${allCards}`);
  // 18 wild cards
  pgm.sql(
    `INSERT INTO cards (id, value) VALUES ${Array(18)
      .fill("(gen_random_uuid(), 0)")
      .join(", ")}`
  );

  // Users table
  pgm.createTable('users', {
    id: { type: 'uuid', primaryKey: true, default: pgm.func('gen_random_uuid()') },
    username: { type: 'varchar(50)', notNull: true, unique: true },
    email: { type: 'varchar(254)', notNull: true, unique: true },
    gravatar: { type: 'varchar(100)', notNull: true },
    password_hash: { type: 'varchar(60)', notNull: true },
    created_at: { type: 'timestamp', notNull: true, default: pgm.func('current_timestamp') },
    updated_at: { type: 'timestamp', notNull: true, default: pgm.func('current_timestamp') }
  });

  // Games table
  pgm.createTable('games', {
    id: { type: 'uuid', primaryKey: true, default: pgm.func('gen_random_uuid()') },
    status: {
      type: 'varchar(20)',
      notNull: true,
      default: 'waiting',
      check: "status IN ('waiting', 'in_progress', 'completed', 'cancelled')",
    },
    player_count: {
      type: "integer",
      default: 4,
      notNull: true,
    },
    password: {
      type: "text",
    },
    current_seat: {
      type: "integer",
      notNull: true,
      default: 1,
    },
    turn: {
      type: "integer",
      default: 0,
    },
    board_state: { type: 'jsonb', notNull: true, default: '{}' },
    winner_id: { type: 'uuid', references: 'users', onDelete: 'SET NULL' },
    created_at: { type: 'timestamp', notNull: true, default: pgm.func('current_timestamp') },
    updated_at: { type: 'timestamp', notNull: true, default: pgm.func('current_timestamp') }
  });

  // Game Players table (combines game_users and game_players)
  pgm.createTable('game_players', {
    id: { type: 'uuid', primaryKey: true, default: pgm.func('gen_random_uuid()') },
    game_id: { type: 'uuid', notNull: true, references: 'games', onDelete: 'CASCADE' },
    user_id: { type: 'uuid', notNull: true, references: 'users', onDelete: 'CASCADE' },
    seat: { type: 'integer', notNull: true },
    last_draw_turn: {
      type: "integer",
      default: -1,
    },
    created_at: { type: 'timestamp', notNull: true, default: pgm.func('current_timestamp') }
  });

  // Game Cards table
  pgm.createTable('game_cards', {
    id: { type: 'uuid', primaryKey: true, default: pgm.func('gen_random_uuid()') },
    game_id: { type: 'uuid', notNull: true, references: 'games', onDelete: 'CASCADE' },
    card_id: { type: 'uuid', notNull: true, references: 'cards', onDelete: 'CASCADE' },
    user_id: { type: 'uuid', references: 'users', onDelete: 'CASCADE' },
    position: { type: 'uuid', notNull: true, default: pgm.func('uuid_generate_v4()') },
    pile: {
      type: "integer",
      notNull: true,
      default: 0,
    }
  });

  // Game Moves table
  pgm.createTable('game_moves', {
    id: { type: 'uuid', primaryKey: true, default: pgm.func('gen_random_uuid()') },
    game_id: { type: 'uuid', notNull: true, references: 'games', onDelete: 'CASCADE' },
    user_id: { type: 'uuid', notNull: true, references: 'users', onDelete: 'CASCADE' },
    card_played: { type: 'jsonb', notNull: true },
    position: { type: 'point', notNull: true },
    created_at: { type: 'timestamp', notNull: true, default: pgm.func('current_timestamp') }
  });

  // Create necessary indexes
  pgm.createIndex('users', 'username');
  pgm.createIndex('users', 'email');
  pgm.createIndex('games', 'status');
  pgm.createIndex('game_players', ['game_id', 'user_id'], { unique: true });
  pgm.createIndex('game_players', ['game_id', 'seat'], { unique: true });
  pgm.createIndex('game_moves', ['game_id', 'created_at']);
  pgm.createIndex('game_cards', ['game_id', 'user_id']);
  pgm.createIndex('game_cards', ['game_id', 'pile']);

  // Create updated_at trigger function
  pgm.createFunction(
    'update_updated_at_column',
    [],
    {
      returns: 'trigger',
      language: 'plpgsql',
    },
    `
    BEGIN
      NEW.updated_at = current_timestamp;
      RETURN NEW;
    END;
    `
  );

  // Add updated_at triggers
  pgm.createTrigger('users', 'update_updated_at_trigger', {
    when: 'BEFORE',
    operation: 'UPDATE',
    function: 'update_updated_at_column',
    level: 'ROW',
  });

  pgm.createTrigger('games', 'update_updated_at_trigger', {
    when: 'BEFORE',
    operation: 'UPDATE',
    function: 'update_updated_at_column',
    level: 'ROW',
  });
}

export async function down(pgm: MigrationBuilder): Promise<void> {
  // Drop triggers first
  pgm.dropTrigger('users', 'update_updated_at_trigger');
  pgm.dropTrigger('games', 'update_updated_at_trigger');
  
  // Drop function
  pgm.dropFunction('update_updated_at_column', []);

  // Drop tables in reverse order of their dependencies
  pgm.dropTable('game_moves');
  pgm.dropTable('game_cards');
  pgm.dropTable('game_players');
  pgm.dropTable('games');
  pgm.dropTable('users');
  pgm.dropTable('cards');
}

================
File: package.json
================
{
  "name": "term-project-yas-kween",
  "version": "1.0.0",
  "scripts": {
    "start:dev": "concurrently --names server,frontend,tailwind -c blue,green,magenta \"npm run server:dev\" \"npm run build:dev\" \"npm run tailwind:dev\"",
    "server:dev": "nodemon --exec ts-node src/server/index.ts --ext ts,js,css,ejs --ignore src/public/js",
    "tailwind:dev": "npx tailwindcss -i ./src/public/css/main.css -o ./src/public/css/bundle.css --watch",
    "prepare": "husky",
    "db:create": "node-pg-migrate create -j ts --",
    "db:migrate": "ts-node node_modules/node-pg-migrate/bin/node-pg-migrate.js up -j ts",
    "db:rollback": "ts-node node_modules/node-pg-migrate/bin/node-pg-migrate.js down -j ts",
    "build": "webpack build",
    "build:dev": "webpack build --mode development --watch",
    "migrate": "ts-node src/server/db/migrate.ts"
  },
  "lint-staged": {
    "**/*": [
      "prettier --write --ignore-unknown",
      "eslint --fix --no-warn-ignored"
    ]
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@eslint/js": "^9.12.0",
    "@types/bcrypt": "^5.0.2",
    "@types/connect-livereload": "^0.6.3",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/cookie-parser": "^1.4.7",
    "@types/express": "^5.0.0",
    "@types/express-flash": "^0.0.5",
    "@types/express-session": "^1.18.0",
    "@types/livereload": "^0.9.5",
    "@types/morgan": "^1.9.9",
    "@types/node": "^22.7.9",
    "@types/pg-promise": "^0.0.28",
    "@types/webpack": "^5.28.5",
    "concurrently": "^9.0.1",
    "connect-livereload": "^0.6.1",
    "eslint": "^9.12.0",
    "eslint-config-prettier": "^9.1.0",
    "globals": "^15.11.0",
    "husky": "^9.1.6",
    "lint-staged": "^15.2.10",
    "livereload": "^0.9.3",
    "node-ts": "^6.1.3",
    "nodemon": "^3.1.7",
    "prettier": "^3.3.3",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.3",
    "typescript-eslint": "^8.10.0",
    "webpack": "^5.95.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@types/express-rate-limit": "^5.1.3",
    "@types/helmet": "^0.0.48",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.7.9",
    "bcrypt": "^5.1.1",
    "clsx": "^2.1.1",
    "connect-pg-simple": "^10.0.0",
    "cookie-parser": "^1.4.7",
    "dotenv": "^16.4.5",
    "ejs": "^3.1.10",
    "express": "^5.0.1",
    "express-flash": "^0.0.2",
    "express-rate-limit": "^7.5.0",
    "express-session": "^1.18.1",
    "express-validator": "^7.2.0",
    "framer-motion": "^11.15.0",
    "helmet": "^8.0.0",
    "http-errors": "^2.0.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "node-pg-migrate": "^7.7.1",
    "pg": "^8.13.1",
    "pg-promise": "^11.10.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.0.2",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^2.5.4",
    "tailwindcss": "^3.4.15"
  }
}

================
File: README.md
================
[![Open in Codespaces](https://classroom.github.com/assets/launch-codespace-2972f46106e565e64193e422d61a12cf1da4916b45550586e14ef0a7c637dd04.svg)](https://classroom.github.com/open-in-codespaces?assignment_repo_id=16638499)
# CSC 667/867 Fall 2024 Term Project

## Team Members

- Yash Pachori
- Raquel Lutges
- Addhyan Kohli
- Kayla Young

================
File: src/client/chat.ts
================
const form = document.querySelector<HTMLFormElement>("#chat-section form")!;
const input = document.querySelector<HTMLInputElement>("input#chat-message")!;
const messageArea =
  document.querySelector<HTMLUListElement>("#chat-section ul")!;
const messageTemplate = document.querySelector<HTMLTemplateElement>(
  "#chat-message-template",
)!;

form.addEventListener("submit", (e) => {
  e.preventDefault();

  const message = input.value;
  input.value = "";

  fetch(`/chat/${window.roomId}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ message }),
  }).then((response) => {
    if (response.status !== 200) {
      console.error("Error:", response);
    }
  });
});

window.socket.on(
  `message:${window.roomId}`,
  ({
    message,
    sender,
    gravatar,
  }: {
    message: string;
    sender: string;
    timestamp: string;
    gravatar: string;
  }) => {
    const messageElement = messageTemplate.content.cloneNode(
      true,
    ) as HTMLElement;
    messageElement.querySelector("img")!.src =
      `https://www.gravatar.com/avatar/${gravatar}`;
    messageElement.querySelector("img")!.alt = sender;

    const span = messageElement.querySelector("span")!;
    span.textContent = message;

    if (sender === "system") {
      span.classList.add("text-red-500");
    }

    messageArea.appendChild(messageElement);
    messageArea.scrollTo(0, messageArea.scrollHeight);
  },
);

================
File: src/client/game-lobby.ts
================
// TODO jrob fix this plox
window.socket.on("game-starting", () => {
  window.location.href = `/games/${window.roomId}`;
});

window.socket.on("player-joined", ({ username, email, gravatar }) => {
  console.log("Player joined!", { username, email, gravatar });
});

================
File: src/client/games.ts
================
import { cardClickHandler } from "./games/card-click-handler";
import { updateGame } from "./games/index";

const gameId = window.location.pathname.split("/").pop();

window.socket.on(`game:${gameId}:updated`, (game) => {
  updateGame(game);
});

setTimeout(() => {
  fetch(`/games/${gameId}/update`);
}, 1000);

document
  .querySelector<HTMLFormElement>("#draw-pile")!
  .addEventListener("click", () => {
    fetch(`/games/${gameId}/draw`, { method: "POST" });
  });

document
  .querySelector<HTMLDivElement>("#playing-table")!
  .addEventListener("click", cardClickHandler);

================
File: src/client/games/card-click-handler.ts
================
export const cardClickHandler = (event: MouseEvent) => {
  const card = event.target as HTMLElement;

  if (
    card.classList.contains("card") &&
    card.classList.contains("source-card")
  ) {
    event.preventDefault();

    console.log("source card clicked", { card });
  } else if (
    card.classList.contains("card") &&
    card.classList.contains("destination-card")
  ) {
    event.preventDefault();
  }
};

================
File: src/client/games/create-player-element.ts
================
import { Card, Player } from "../types";
import { getCardValue } from "./get-card-value";
import { updatePile } from "./update-pile";

const playerTemplate =
  document.querySelector<HTMLTemplateElement>("#player-template")!;
const cardTemplate =
  document.querySelector<HTMLTemplateElement>("#card-template")!;

export const createPlayerElement = ({
  username,
  gravatar,
  is_current,
  hand,
  play_pile_top,
  play_pile_top_id,
  play_pile_count,
  pile_1,
  pile_2,
  pile_3,
  pile_4,
}: Omit<Player, "hand"> & { hand?: Card[] }) => {
  const playerElement = playerTemplate.content.cloneNode(
    true,
  ) as HTMLDivElement;

  if (is_current) {
    playerElement.firstElementChild?.classList.add("current-player");
  }

  // Update gravatar
  const gravatarElement =
    playerElement.querySelector<HTMLImageElement>("h4 img")!;
  gravatarElement.src = `https://www.gravatar.com/avatar/${gravatar}`;
  gravatarElement.alt = username;

  // Update username
  playerElement.querySelector("h4 span.username")!.textContent = username;
  playerElement.querySelector("h4 span.card-count")!.textContent =
    `${play_pile_count} cards`;

  // Update hand
  const handElement = playerElement.querySelector<HTMLDivElement>(".hand")!;
  hand?.forEach((card) => {
    const cardElement = cardTemplate.content.cloneNode(true) as HTMLDivElement;

    const cardDiv = cardElement.querySelector<HTMLDivElement>("div.card")!;
    cardDiv.classList.add(`value-${card.value}`, "source-card");
    cardDiv.dataset.cardId = card.id.toString();

    cardElement.querySelector("span")!.textContent = getCardValue(card.value);

    handElement.appendChild(cardElement);
  });

  const topCard = cardTemplate.content.cloneNode(true) as HTMLDivElement;

  const topCardDiv = topCard.querySelector<HTMLDivElement>("div.card")!;
  topCardDiv.classList.add(`value-${play_pile_top}`, "source-card");
  topCardDiv.dataset.cardId = play_pile_top_id.toString();

  topCard.querySelector("span")!.textContent = getCardValue(play_pile_top);

  playerElement
    .querySelector<HTMLDivElement>(".player-pile-0")!
    .replaceChildren(topCard);

  updatePile(pile_1, ".player-pile-1", playerElement);
  updatePile(pile_2, ".player-pile-2", playerElement);
  updatePile(pile_3, ".player-pile-3", playerElement);
  updatePile(pile_4, ".player-pile-4", playerElement);

  return playerElement;
};

================
File: src/client/games/get-card-value.ts
================
export const getCardValue = (value: number): string => {
  if (value === 0) {
    return "Skip-Bo";
  } else {
    return value.toString();
  }
};

================
File: src/client/games/index.ts
================
export { updateGame } from "./update-game";

================
File: src/client/games/update-game.ts
================
import { GameState } from "../types";
import { createPlayerElement } from "./create-player-element";

const playerArea = document.querySelector<HTMLDivElement>("#player-area")!;
const opponentArea = document.querySelector<HTMLDivElement>("#opponent-area")!;

export const updateGame = (game: GameState) => {
  console.log(game);

  playerArea.replaceChildren(createPlayerElement(game.player));

  opponentArea.replaceChildren(
    ...game.players.map((player) => {
      return createPlayerElement(player);
    }),
  );
};

================
File: src/client/games/update-pile.ts
================
import { getCardValue } from "./get-card-value";

const cardTemplate =
  document.querySelector<HTMLTemplateElement>("#card-template")!;

const BLANK_CARD = cardTemplate.content.cloneNode(true) as HTMLDivElement;
BLANK_CARD.querySelector("div.card")!.classList.add(
  "blank",
  "destination-card",
);

export const updatePile = (
  pile: number[],
  selector: string,
  element: HTMLDivElement,
) => {
  const pileElement = element.querySelector<HTMLDivElement>(selector)!;

  if (pile.length === 0) {
    pileElement.replaceChildren(BLANK_CARD.cloneNode(true));
  } else {
    pileElement.replaceChildren(
      ...pile.map((value) => {
        const cardElement = cardTemplate.content.cloneNode(
          true,
        ) as HTMLDivElement;

        cardElement
          .querySelector("div.card")!
          .classList.add(`value-${value}`, "destination-card");
        cardElement.querySelector("span")!.textContent = getCardValue(value);

        return cardElement;
      }),
    );
  }
};

================
File: src/client/main-lobby.ts
================
const list = document.querySelector<HTMLTableSectionElement>(
  "#available-games-list",
)!;
const rowTemplate =
  document.querySelector<HTMLTemplateElement>("#game-row-template")!;

window.socket.on("game-created", (game) => {
  const row = rowTemplate.content.cloneNode(true) as HTMLTableRowElement;
  row.querySelector("tr")!.id = `game-row-${game.id}`;

  row.querySelector("td:nth-child(1)")!.textContent = `Game ${game.id}`;
  row.querySelector("td:nth-child(2)")!.textContent =
    `${game.players} / ${game.player_count}`;
  row.querySelector<HTMLFormElement>("td:nth-child(3) form")!.action =
    `/games/join/${game.id}`;

  list.appendChild(row);
});

window.socket.on("game-updated", (game) => {
  const row = list.querySelector<HTMLTableRowElement>(`#game-row-${game.id}`);

  if (row) {
    if (parseInt(game.players) === game.player_count) {
      row.remove();
    } else {
      row.querySelector("td:nth-child(2)")!.textContent =
        `${game.players} / ${game.player_count}`;
    }
  }
});

================
File: src/client/main.js
================
"use strict";
console.log("Hello from a bundled asset.");

================
File: src/client/main.ts
================
import { io, Socket } from "socket.io-client";

declare global {
  interface Window {
    socket: Socket;
    roomId: number;
  }
}

declare module "express-session" {
   interface SessionData {
     user: {
       id: number;
       username: string;
       email: string;
       gravatar: string;
     };
     roomId: number;
  }
}

window.socket = io();

================
File: src/client/types.ts
================
export type Card = {
  id: number;
  value: number;
};

export type Player = {
  gravatar: string;
  hand: Card[];
  id: number;
  is_current: boolean;
  last_draw_turn: number;
  pile_1: number[];
  pile_2: number[];
  pile_3: number[];
  pile_4: number[];
  play_pile_top: number;
  play_pile_top_id: number;
  play_pile_count: number;
  seat: number;
  username: string;
};

export type GameState = {
  players: Omit<Player, "hand">[];
  player: Player;
};

================
File: src/public/css/bundle.css
================
*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

/*
! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

.container {
  width: 100%;
}

@media (min-width: 640px) {
  .container {
    max-width: 640px;
  }
}

@media (min-width: 768px) {
  .container {
    max-width: 768px;
  }
}

@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}

@media (min-width: 1280px) {
  .container {
    max-width: 1280px;
  }
}

@media (min-width: 1536px) {
  .container {
    max-width: 1536px;
  }
}

.absolute {
  position: absolute;
}

.bottom-0 {
  bottom: 0px;
}

.mx-\[10px\] {
  margin-left: 10px;
  margin-right: 10px;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.mb-1 {
  margin-bottom: 0.25rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.mb-8 {
  margin-bottom: 2rem;
}

.mb-\[-20px\] {
  margin-bottom: -20px;
}

.mb-\[20px\] {
  margin-bottom: 20px;
}

.mb-\[8px\] {
  margin-bottom: 8px;
}

.ml-\[10px\] {
  margin-left: 10px;
}

.mr-\[20px\] {
  margin-right: 20px;
}

.mr-\[4px\] {
  margin-right: 4px;
}

.mr-\[8px\] {
  margin-right: 8px;
}

.mt-1 {
  margin-top: 0.25rem;
}

.mt-4 {
  margin-top: 1rem;
}

.mt-\[10px\] {
  margin-top: 10px;
}

.mt-\[8px\] {
  margin-top: 8px;
}

.block {
  display: block;
}

.flex {
  display: flex;
}

.table {
  display: table;
}

.grid {
  display: grid;
}

.h-\[16px\] {
  height: 16px;
}

.h-\[20px\] {
  height: 20px;
}

.h-\[300px\] {
  height: 300px;
}

.h-\[40px\] {
  height: 40px;
}

.min-h-\[100px\] {
  min-height: 100px;
}

.min-h-screen {
  min-height: 100vh;
}

.w-\[100\%\] {
  width: 100%;
}

.w-\[16px\] {
  width: 16px;
}

.w-\[20px\] {
  width: 20px;
}

.w-\[30px\] {
  width: 30px;
}

.w-\[40px\] {
  width: 40px;
}

.w-\[50\%\] {
  width: 50%;
}

.w-\[60\%\] {
  width: 60%;
}

.w-full {
  width: 100%;
}

.min-w-full {
  min-width: 100%;
}

.max-w-md {
  max-width: 28rem;
}

.grow {
  flex-grow: 1;
}

.basis-2\/6 {
  flex-basis: 33.333333%;
}

.basis-4\/6 {
  flex-basis: 66.666667%;
}

.scale-75 {
  --tw-scale-x: .75;
  --tw-scale-y: .75;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

.flex-row {
  flex-direction: row;
}

.flex-col {
  flex-direction: column;
}

.items-center {
  align-items: center;
}

.justify-start {
  justify-content: flex-start;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

.gap-4 {
  gap: 1rem;
}

.gap-8 {
  gap: 2rem;
}

.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}

.self-start {
  align-self: flex-start;
}

.overflow-y-auto {
  overflow-y: auto;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-\[10px\] {
  border-radius: 10px;
}

.rounded-\[20px\] {
  border-radius: 20px;
}

.rounded-\[8px\] {
  border-radius: 8px;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.rounded-md {
  border-radius: 0.375rem;
}

.rounded-sm {
  border-radius: 0.125rem;
}

.border {
  border-width: 1px;
}

.border-0 {
  border-width: 0px;
}

.border-\[1px\] {
  border-width: 1px;
}

.border-b-\[1px\] {
  border-bottom-width: 1px;
}

.border-gray-300 {
  --tw-border-opacity: 1;
  border-color: rgb(209 213 219 / var(--tw-border-opacity, 1));
}

.border-gray-400 {
  --tw-border-opacity: 1;
  border-color: rgb(156 163 175 / var(--tw-border-opacity, 1));
}

.border-gray-500 {
  --tw-border-opacity: 1;
  border-color: rgb(107 114 128 / var(--tw-border-opacity, 1));
}

.border-gray-600 {
  --tw-border-opacity: 1;
  border-color: rgb(75 85 99 / var(--tw-border-opacity, 1));
}

.bg-blue-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(191 219 254 / var(--tw-bg-opacity, 1));
}

.bg-blue-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(147 197 253 / var(--tw-bg-opacity, 1));
}

.bg-blue-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));
}

.bg-gray-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(75 85 99 / var(--tw-bg-opacity, 1));
}

.bg-gray-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity, 1));
}

.bg-gray-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity, 1));
}

.bg-green-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));
}

.bg-red-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));
}

.p-3 {
  padding: 0.75rem;
}

.p-4 {
  padding: 1rem;
}

.p-8 {
  padding: 2rem;
}

.p-\[10px\] {
  padding: 10px;
}

.p-\[4px\] {
  padding: 4px;
}

.px-1 {
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

.px-2 {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.px-3 {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.px-6 {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

.py-1 {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.py-3 {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.py-8 {
  padding-top: 2rem;
  padding-bottom: 2rem;
}

.py-\[4px\] {
  padding-top: 4px;
  padding-bottom: 4px;
}

.pt-\[10px\] {
  padding-top: 10px;
}

.pt-\[2px\] {
  padding-top: 2px;
}

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-4xl {
  font-size: 2.25rem;
  line-height: 2.5rem;
}

.text-\[10px\] {
  font-size: 10px;
}

.text-\[12px\] {
  font-size: 12px;
}

.text-\[8px\] {
  font-size: 8px;
}

.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.font-bold {
  font-weight: 700;
}

.font-light {
  font-weight: 300;
}

.font-medium {
  font-weight: 500;
}

.text-blue-400 {
  --tw-text-opacity: 1;
  color: rgb(96 165 250 / var(--tw-text-opacity, 1));
}

.text-gray-500 {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity, 1));
}

.text-gray-700 {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity, 1));
}

.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity, 1));
}

.text-red-500 {
  --tw-text-opacity: 1;
  color: rgb(239 68 68 / var(--tw-text-opacity, 1));
}

.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
}

.shadow-lg {
  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.ring-1 {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.ring-inset {
  --tw-ring-inset: inset;
}

.ring-gray-300 {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(209 213 219 / var(--tw-ring-opacity, 1));
}

.card {
  position: relative;
  display: flex;
  height: 60px;
  width: 40px;
  align-items: center;
  justify-content: center;
  border-radius: 0.5rem;
  border-width: 1px;
  --tw-border-opacity: 1;
  border-color: rgb(209 213 219 / var(--tw-border-opacity, 1));
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
  text-shadow: 0 1px 0 rgb(0 0 0 / 40%);
}

.card > span {
  font-size: 24px;
}

.card.value-0 > span {
  font-size: 8px;
}

.card.back {
  background-image: url('/images/logo.webp');
  background-size: cover;
  background-repeat: no-repeat;
}

.card.blank {
  border-style: dashed;
  background-image: none;
}

.card.value-1,
.card.value-2,
.card.value-3,
.card.value-4 {
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity, 1));
}

.card.value-5,
.card.value-6,
.card.value-7,
.card.value-8 {
  --tw-bg-opacity: 1;
  background-color: rgb(21 128 61 / var(--tw-bg-opacity, 1));
}

.card.value-9,
.card.value-10,
.card.value-11,
.card.value-12 {
  --tw-bg-opacity: 1;
  background-color: rgb(185 28 28 / var(--tw-bg-opacity, 1));
}

.card.value-0 {
  --tw-bg-opacity: 1;
  background-color: rgb(251 146 60 / var(--tw-bg-opacity, 1));
}

.card.value-1::before,
.card.value-1::after {
  content: "1";
}

.card.value-2::before,
.card.value-2::after {
  content: "2";
}

.card.value-3::before,
.card.value-3::after {
  content: "3";
}

.card.value-4::before,
.card.value-4::after {
  content: "4";
}

.card.value-5::before,
.card.value-5::after {
  content: "5";
}

.card.value-6::before,
.card.value-6::after {
  content: "6";
}

.card.value-7::before,
.card.value-7::after {
  content: "7";
}

.card.value-8::before,
.card.value-8::after {
  content: "8";
}

.card.value-9::before,
.card.value-9::after {
  content: "9";
}

.card.value-10::before,
.card.value-10::after {
  content: "10";
}

.card.value-11::before,
.card.value-11::after {
  content: "11";
}

.card.value-12::before,
.card.value-12::after {
  content: "12";
}

.card.wild::before,
.card.wild::after {
  content: "S";
}

.card::before {
  position: absolute;
  left: 2px;
  top: 0px;
  font-size: 10px;
}

.card::after {
  position: absolute;
  bottom: 0px;
  right: 2px;
  --tw-rotate: 180deg;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  font-size: 10px;
}

#opponent-area > div {
  --tw-scale-x: .5;
  --tw-scale-y: .5;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.current-player {
  background-color: rgb(147 197 253 / 0.45);
}

.placeholder\:text-gray-400::-moz-placeholder {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity, 1));
}

.placeholder\:text-gray-400::placeholder {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity, 1));
}

.hover\:bg-blue-600:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));
}

.hover\:bg-blue-700:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity, 1));
}

.hover\:bg-green-600:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(22 163 74 / var(--tw-bg-opacity, 1));
}

.hover\:bg-green-700:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(21 128 61 / var(--tw-bg-opacity, 1));
}

.hover\:bg-red-600:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));
}

.hover\:text-blue-300:hover {
  --tw-text-opacity: 1;
  color: rgb(147 197 253 / var(--tw-text-opacity, 1));
}

.focus\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.focus\:ring-2:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.focus\:ring-\[2px\]:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.focus\:ring-inset:focus {
  --tw-ring-inset: inset;
}

.focus\:ring-blue-500:focus {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));
}

.focus\:ring-green-500:focus {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(34 197 94 / var(--tw-ring-opacity, 1));
}

@media (min-width: 768px) {
  .md\:grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

================
File: src/public/css/main.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

.card {
  @apply bg-white border border-gray-300 rounded-lg w-[40px] h-[60px] text-white relative flex items-center justify-center [text-shadow:_0_1px_0_rgb(0_0_0_/_40%)];
}

.card > span {
  @apply text-[24px];
}

.card.value-0 > span {
  @apply text-[8px];
}

.card.back {
  @apply bg-cover bg-no-repeat bg-[url('/images/logo.webp')];
}
.card.blank {
  @apply border-dashed bg-none;
}

.card.value-1,
.card.value-2,
.card.value-3,
.card.value-4 {
  @apply bg-blue-700;
}
.card.value-5,
.card.value-6,
.card.value-7,
.card.value-8 {
  @apply bg-green-700;
}
.card.value-9,
.card.value-10,
.card.value-11,
.card.value-12 {
  @apply bg-red-700;
}
.card.value-0 {
  @apply bg-orange-400;
}

.card.value-1::before,
.card.value-1::after {
  content: "1";
}
.card.value-2::before,
.card.value-2::after {
  content: "2";
}
.card.value-3::before,
.card.value-3::after {
  content: "3";
}
.card.value-4::before,
.card.value-4::after {
  content: "4";
}
.card.value-5::before,
.card.value-5::after {
  content: "5";
}
.card.value-6::before,
.card.value-6::after {
  content: "6";
}
.card.value-7::before,
.card.value-7::after {
  content: "7";
}
.card.value-8::before,
.card.value-8::after {
  content: "8";
}
.card.value-9::before,
.card.value-9::after {
  content: "9";
}
.card.value-10::before,
.card.value-10::after {
  content: "10";
}
.card.value-11::before,
.card.value-11::after {
  content: "11";
}
.card.value-12::before,
.card.value-12::after {
  content: "12";
}
.card.wild::before,
.card.wild::after {
  content: "S";
}

.card::before {
  @apply absolute left-[2px] top-[0px] text-[10px];
}

.card::after {
  @apply absolute bottom-[0px] right-[2px] text-[10px] rotate-180;
}

#opponent-area > div {
  @apply scale-50;
}

.current-player {
  @apply bg-blue-300/45;
}

================
File: src/public/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sequence Game</title>
    <link href="/css/bundle.css" rel="stylesheet">
</head>
<body class="bg-gray-800 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="bg-gray-700 rounded-lg p-8 text-white text-center">
            <h1 class="text-4xl font-bold mb-4">Welcome to Sequence</h1>
            <p class="mb-8">Please log in or create an account to start playing.</p>
            <div class="flex justify-center gap-4">
                <a href="/auth/login" class="px-6 py-3 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Login
                </a>
                <a href="/auth/register" class="px-6 py-3 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                    Register
                </a>
            </div>
        </div>
    </div>
</body>
</html>

================
File: src/public/js/main.js
================
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/common.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/common.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js?");

/***/ }),

/***/ "./src/client/main.ts":
/*!****************************!*\
  !*** ./src/client/main.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst socket_io_client_1 = __webpack_require__(/*! socket.io-client */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/index.js\");\nwindow.socket = (0, socket_io_client_1.io)();\n\n\n//# sourceURL=webpack://term-project-yas-kween/./src/client/main.ts?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/has-cors.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/has-cors.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasCORS = void 0;\n// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexports.hasCORS = value;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/has-cors.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encode = encode;\nexports.decode = decode;\nfunction encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nfunction decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parse = parse;\n// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nfunction parse(str) {\n    if (str.length > 8000) {\n        throw \"URI too long\";\n    }\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultBinaryType = exports.globalThisShim = exports.nextTick = void 0;\nexports.createCookieJar = createCookieJar;\nexports.nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return (cb) => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexports.globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\nexports.defaultBinaryType = \"arraybuffer\";\nfunction createCookieJar() { }\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebTransport = exports.WebSocket = exports.NodeWebSocket = exports.XHR = exports.NodeXHR = exports.Fetch = exports.nextTick = exports.parse = exports.installTimerFunctions = exports.transports = exports.TransportError = exports.Transport = exports.protocol = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = exports.Socket = void 0;\nconst socket_js_1 = __webpack_require__(/*! ./socket.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js\");\nObject.defineProperty(exports, \"Socket\", ({ enumerable: true, get: function () { return socket_js_1.Socket; } }));\nvar socket_js_2 = __webpack_require__(/*! ./socket.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js\");\nObject.defineProperty(exports, \"SocketWithoutUpgrade\", ({ enumerable: true, get: function () { return socket_js_2.SocketWithoutUpgrade; } }));\nObject.defineProperty(exports, \"SocketWithUpgrade\", ({ enumerable: true, get: function () { return socket_js_2.SocketWithUpgrade; } }));\nexports.protocol = socket_js_1.Socket.protocol;\nvar transport_js_1 = __webpack_require__(/*! ./transport.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js\");\nObject.defineProperty(exports, \"Transport\", ({ enumerable: true, get: function () { return transport_js_1.Transport; } }));\nObject.defineProperty(exports, \"TransportError\", ({ enumerable: true, get: function () { return transport_js_1.TransportError; } }));\nvar index_js_1 = __webpack_require__(/*! ./transports/index.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js\");\nObject.defineProperty(exports, \"transports\", ({ enumerable: true, get: function () { return index_js_1.transports; } }));\nvar util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js\");\nObject.defineProperty(exports, \"installTimerFunctions\", ({ enumerable: true, get: function () { return util_js_1.installTimerFunctions; } }));\nvar parseuri_js_1 = __webpack_require__(/*! ./contrib/parseuri.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js\");\nObject.defineProperty(exports, \"parse\", ({ enumerable: true, get: function () { return parseuri_js_1.parse; } }));\nvar globals_node_js_1 = __webpack_require__(/*! ./globals.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js\");\nObject.defineProperty(exports, \"nextTick\", ({ enumerable: true, get: function () { return globals_node_js_1.nextTick; } }));\nvar polling_fetch_js_1 = __webpack_require__(/*! ./transports/polling-fetch.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-fetch.js\");\nObject.defineProperty(exports, \"Fetch\", ({ enumerable: true, get: function () { return polling_fetch_js_1.Fetch; } }));\nvar polling_xhr_node_js_1 = __webpack_require__(/*! ./transports/polling-xhr.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js\");\nObject.defineProperty(exports, \"NodeXHR\", ({ enumerable: true, get: function () { return polling_xhr_node_js_1.XHR; } }));\nvar polling_xhr_js_1 = __webpack_require__(/*! ./transports/polling-xhr.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js\");\nObject.defineProperty(exports, \"XHR\", ({ enumerable: true, get: function () { return polling_xhr_js_1.XHR; } }));\nvar websocket_node_js_1 = __webpack_require__(/*! ./transports/websocket.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js\");\nObject.defineProperty(exports, \"NodeWebSocket\", ({ enumerable: true, get: function () { return websocket_node_js_1.WS; } }));\nvar websocket_js_1 = __webpack_require__(/*! ./transports/websocket.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js\");\nObject.defineProperty(exports, \"WebSocket\", ({ enumerable: true, get: function () { return websocket_js_1.WS; } }));\nvar webtransport_js_1 = __webpack_require__(/*! ./transports/webtransport.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js\");\nObject.defineProperty(exports, \"WebTransport\", ({ enumerable: true, get: function () { return webtransport_js_1.WT; } }));\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Socket = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = void 0;\nconst index_js_1 = __webpack_require__(/*! ./transports/index.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js\");\nconst util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js\");\nconst parseqs_js_1 = __webpack_require__(/*! ./contrib/parseqs.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js\");\nconst parseuri_js_1 = __webpack_require__(/*! ./contrib/parseuri.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js\");\nconst component_emitter_1 = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js\");\nconst engine_io_parser_1 = __webpack_require__(/*! engine.io-parser */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js\");\nconst globals_node_js_1 = __webpack_require__(/*! ./globals.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        debug(\"closing %d connection(s) because the network was lost\", OFFLINE_EVENT_LISTENERS.length);\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nclass SocketWithoutUpgrade extends component_emitter_1.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = globals_node_js_1.defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = (0, parseuri_js_1.parse)(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n        }\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                debug(\"adding listener for the 'offline' event\");\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = (0, globals_node_js_1.createCookieJar)();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        debug('creating transport \"%s\"', name);\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = engine_io_parser_1.protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        debug(\"options: %j\", opts);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        debug(\"setting transport %s\", transport.name);\n        if (this.transport) {\n            debug(\"clearing existing transport %s\", this.transport.name);\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        debug(\"socket open\");\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n            debug('packet received with socket readyState \"%s\"', this.readyState);\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            debug(\"flushing %d packets in socket\", packets.length);\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += (0, util_js_1.byteLength)(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        debug(\"payload size is %d (max: %d)\", payloadSize, this._maxPayload);\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            debug(\"throttled timer detected, scheduling connection close\");\n            this._pingTimeoutTime = 0;\n            (0, globals_node_js_1.nextTick)(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            debug(\"socket closing - telling transport to close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        debug(\"socket error %j\", err);\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            debug(\"trying next transport\");\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket close with reason: \"%s\"', reason);\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        debug(\"removing listener for the 'offline' event\");\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nexports.SocketWithoutUpgrade = SocketWithoutUpgrade;\nSocketWithoutUpgrade.protocol = engine_io_parser_1.protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nclass SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            debug(\"starting upgrade probes\");\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        debug('probing transport \"%s\"', name);\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            debug('probe transport \"%s\" opened', name);\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    debug('probe transport \"%s\" pong', name);\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    debug('pausing current transport \"%s\"', this.transport.name);\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        debug(\"changing transport and sending upgrade packet\");\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    debug('probe transport \"%s\" failed', name);\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nexports.SocketWithUpgrade = SocketWithUpgrade;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nclass Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => index_js_1.transports[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\nexports.Socket = Socket;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transport = exports.TransportError = void 0;\nconst engine_io_parser_1 = __webpack_require__(/*! engine.io-parser */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js\");\nconst component_emitter_1 = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js\");\nconst util_js_1 = __webpack_require__(/*! ./util.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js\");\nconst parseqs_js_1 = __webpack_require__(/*! ./contrib/parseqs.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:transport\"); // debug()\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexports.TransportError = TransportError;\nclass Transport extends component_emitter_1.Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n            debug(\"transport is not open, discarding packets\");\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = (0, engine_io_parser_1.decodePacket)(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = (0, parseqs_js_1.encode)(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\nexports.Transport = Transport;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.transports = void 0;\nconst polling_xhr_node_js_1 = __webpack_require__(/*! ./polling-xhr.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js\");\nconst websocket_node_js_1 = __webpack_require__(/*! ./websocket.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js\");\nconst webtransport_js_1 = __webpack_require__(/*! ./webtransport.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js\");\nexports.transports = {\n    websocket: websocket_node_js_1.WS,\n    webtransport: webtransport_js_1.WT,\n    polling: polling_xhr_node_js_1.XHR,\n};\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-fetch.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-fetch.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Fetch = void 0;\nconst polling_js_1 = __webpack_require__(/*! ./polling.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js\");\n/**\n * HTTP long-polling based on the built-in `fetch()` method.\n *\n * Usage: browser, Node.js (since v18), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/fetch\n * @see https://caniuse.com/fetch\n * @see https://nodejs.org/api/globals.html#fetch\n */\nclass Fetch extends polling_js_1.Polling {\n    doPoll() {\n        this._fetch()\n            .then((res) => {\n            if (!res.ok) {\n                return this.onError(\"fetch read error\", res.status, res);\n            }\n            res.text().then((data) => this.onData(data));\n        })\n            .catch((err) => {\n            this.onError(\"fetch read error\", err);\n        });\n    }\n    doWrite(data, callback) {\n        this._fetch(data)\n            .then((res) => {\n            if (!res.ok) {\n                return this.onError(\"fetch write error\", res.status, res);\n            }\n            callback();\n        })\n            .catch((err) => {\n            this.onError(\"fetch write error\", err);\n        });\n    }\n    _fetch(data) {\n        var _a;\n        const isPost = data !== undefined;\n        const headers = new Headers(this.opts.extraHeaders);\n        if (isPost) {\n            headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n        }\n        (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);\n        return fetch(this.uri(), {\n            method: isPost ? \"POST\" : \"GET\",\n            body: isPost ? data : null,\n            headers,\n            credentials: this.opts.withCredentials ? \"include\" : \"omit\",\n        }).then((res) => {\n            var _a;\n            // @ts-ignore getSetCookie() was added in Node.js v19.7.0\n            (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(res.headers.getSetCookie());\n            return res;\n        });\n    }\n}\nexports.Fetch = Fetch;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-fetch.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.XHR = exports.Request = exports.BaseXHR = void 0;\nconst polling_js_1 = __webpack_require__(/*! ./polling.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js\");\nconst component_emitter_1 = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js\");\nconst util_js_1 = __webpack_require__(/*! ../util.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js\");\nconst globals_node_js_1 = __webpack_require__(/*! ../globals.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js\");\nconst has_cors_js_1 = __webpack_require__(/*! ../contrib/has-cors.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/has-cors.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\nfunction empty() { }\nclass BaseXHR extends polling_js_1.Polling {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @package\n     */\n    constructor(opts) {\n        super(opts);\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n        }\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data,\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @private\n     */\n    doPoll() {\n        debug(\"xhr poll\");\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexports.BaseXHR = BaseXHR;\nclass Request extends component_emitter_1.Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @package\n     */\n    constructor(createRequest, uri, opts) {\n        super();\n        this.createRequest = createRequest;\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this._opts = opts;\n        this._method = opts.method || \"GET\";\n        this._uri = uri;\n        this._data = undefined !== opts.data ? opts.data : null;\n        this._create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @private\n     */\n    _create() {\n        var _a;\n        const opts = (0, util_js_1.pick)(this._opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this._opts.xd;\n        const xhr = (this._xhr = this.createRequest(opts));\n        try {\n            debug(\"xhr open %s: %s\", this._method, this._uri);\n            xhr.open(this._method, this._uri, true);\n            try {\n                if (this._opts.extraHeaders) {\n                    // @ts-ignore\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this._opts.extraHeaders) {\n                        if (this._opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this._opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this._method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this._opts.withCredentials;\n            }\n            if (this._opts.requestTimeout) {\n                xhr.timeout = this._opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                var _a;\n                if (xhr.readyState === 3) {\n                    (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(\n                    // @ts-ignore\n                    xhr.getResponseHeader(\"set-cookie\"));\n                }\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this._onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this._onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            debug(\"xhr data %s\", this._data);\n            xhr.send(this._data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this._onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this._index = Request.requestsCount++;\n            Request.requests[this._index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @private\n     */\n    _onError(err) {\n        this.emitReserved(\"error\", err, this._xhr);\n        this._cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @private\n     */\n    _cleanup(fromError) {\n        if (\"undefined\" === typeof this._xhr || null === this._xhr) {\n            return;\n        }\n        this._xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this._xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this._index];\n        }\n        this._xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @private\n     */\n    _onLoad() {\n        const data = this._xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this._cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @package\n     */\n    abort() {\n        this._cleanup();\n    }\n}\nexports.Request = Request;\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globals_node_js_1.globalThisShim ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\nconst hasXHR2 = (function () {\n    const xhr = newRequest({\n        xdomain: false,\n    });\n    return xhr && xhr.responseType !== null;\n})();\n/**\n * HTTP long-polling based on the built-in `XMLHttpRequest` object.\n *\n * Usage: browser\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n */\nclass XHR extends BaseXHR {\n    constructor(opts) {\n        super(opts);\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd }, this.opts);\n        return new Request(newRequest, this.uri(), opts);\n    }\n}\nexports.XHR = XHR;\nfunction newRequest(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || has_cors_js_1.hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globals_node_js_1.globalThisShim[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Polling = void 0;\nconst transport_js_1 = __webpack_require__(/*! ../transport.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js\");\nconst util_js_1 = __webpack_require__(/*! ../util.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js\");\nconst engine_io_parser_1 = __webpack_require__(/*! engine.io-parser */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\nclass Polling extends transport_js_1.Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            debug(\"paused\");\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                debug(\"we are currently polling - waiting to pause\");\n                total++;\n                this.once(\"pollComplete\", function () {\n                    debug(\"pre-pause polling complete\");\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                debug(\"we are currently writing - waiting to pause\");\n                total++;\n                this.once(\"drain\", function () {\n                    debug(\"pre-pause writing complete\");\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        debug(\"polling\");\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        debug(\"polling got data %s\", data);\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n                debug('ignoring poll - transport state \"%s\"', this.readyState);\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            debug(\"writing close packet\");\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            debug(\"transport open - closing\");\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            debug(\"transport not open - deferring close\");\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        (0, engine_io_parser_1.encodePayload)(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = (0, util_js_1.randomString)();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\nexports.Polling = Polling;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WS = exports.BaseWS = void 0;\nconst transport_js_1 = __webpack_require__(/*! ../transport.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js\");\nconst util_js_1 = __webpack_require__(/*! ../util.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js\");\nconst engine_io_parser_1 = __webpack_require__(/*! engine.io-parser */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js\");\nconst globals_node_js_1 = __webpack_require__(/*! ../globals.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:websocket\"); // debug()\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nclass BaseWS extends transport_js_1.Transport {\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : (0, util_js_1.pick)(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws = this.createSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            (0, engine_io_parser_1.encodePacket)(packet, this.supportsBinary, (data) => {\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    this.doWrite(packet, data);\n                }\n                catch (e) {\n                    debug(\"websocket closed before onclose event\");\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    (0, globals_node_js_1.nextTick)(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.onerror = () => { };\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = (0, util_js_1.randomString)();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\nexports.BaseWS = BaseWS;\nconst WebSocketCtor = globals_node_js_1.globalThisShim.WebSocket || globals_node_js_1.globalThisShim.MozWebSocket;\n/**\n * WebSocket transport based on the built-in `WebSocket` object.\n *\n * Usage: browser, Node.js (since v21), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n * @see https://caniuse.com/mdn-api_websocket\n * @see https://nodejs.org/api/globals.html#websocket\n */\nclass WS extends BaseWS {\n    createSocket(uri, protocols, opts) {\n        return !isReactNative\n            ? protocols\n                ? new WebSocketCtor(uri, protocols)\n                : new WebSocketCtor(uri)\n            : new WebSocketCtor(uri, protocols, opts);\n    }\n    doWrite(_packet, data) {\n        this.ws.send(data);\n    }\n}\nexports.WS = WS;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WT = void 0;\nconst transport_js_1 = __webpack_require__(/*! ../transport.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js\");\nconst globals_node_js_1 = __webpack_require__(/*! ../globals.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js\");\nconst engine_io_parser_1 = __webpack_require__(/*! engine.io-parser */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"engine.io-client:webtransport\"); // debug()\n/**\n * WebTransport transport based on the built-in `WebTransport` object.\n *\n * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n * @see https://caniuse.com/webtransport\n */\nclass WT extends transport_js_1.Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        try {\n            // @ts-ignore\n            this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this._transport.closed\n            .then(() => {\n            debug(\"transport closed gracefully\");\n            this.onClose();\n        })\n            .catch((err) => {\n            debug(\"transport closed due to %s\", err);\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this._transport.ready.then(() => {\n            this._transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = (0, engine_io_parser_1.createPacketDecoderStream)(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = (0, engine_io_parser_1.createPacketEncoderStream)();\n                encoderStream.readable.pipeTo(stream.writable);\n                this._writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            debug(\"session is closed\");\n                            return;\n                        }\n                        debug(\"received chunk: %o\", value);\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                        debug(\"an error occurred while reading: %s\", err);\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this._writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this._writer.write(packet).then(() => {\n                if (lastPacket) {\n                    (0, globals_node_js_1.nextTick)(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\nexports.WT = WT;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pick = pick;\nexports.installTimerFunctions = installTimerFunctions;\nexports.byteLength = byteLength;\nexports.randomString = randomString;\nconst globals_node_js_1 = __webpack_require__(/*! ./globals.node.js */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js\");\nfunction pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = globals_node_js_1.globalThisShim.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = globals_node_js_1.globalThisShim.clearTimeout;\nfunction installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globals_node_js_1.globalThisShim);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globals_node_js_1.globalThisShim);\n    }\n    else {\n        obj.setTimeoutFn = globals_node_js_1.globalThisShim.setTimeout.bind(globals_node_js_1.globalThisShim);\n        obj.clearTimeoutFn = globals_node_js_1.globalThisShim.clearTimeout.bind(globals_node_js_1.globalThisShim);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nfunction byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n/**\n * Generates a random 8-characters string.\n */\nfunction randomString() {\n    return (Date.now().toString(36).substring(3) +\n        Math.random().toString(36).substring(2, 5));\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERROR_PACKET = exports.PACKET_TYPES_REVERSE = exports.PACKET_TYPES = void 0;\nconst PACKET_TYPES = Object.create(null); // no Map = no polyfill\nexports.PACKET_TYPES = PACKET_TYPES;\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nexports.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;\nObject.keys(PACKET_TYPES).forEach((key) => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexports.ERROR_PACKET = ERROR_PACKET;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decode = exports.encode = void 0;\n// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nconst encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexports.encode = encode;\nconst decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\nexports.decode = decode;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/decodePacket.browser.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/decodePacket.browser.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodePacket = void 0;\nconst commons_js_1 = __webpack_require__(/*! ./commons.js */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js\");\nconst base64_arraybuffer_js_1 = __webpack_require__(/*! ./contrib/base64-arraybuffer.js */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = commons_js_1.PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return commons_js_1.ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: commons_js_1.PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: commons_js_1.PACKET_TYPES_REVERSE[type],\n        };\n};\nexports.decodePacket = decodePacket;\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = (0, base64_arraybuffer_js_1.decode)(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/decodePacket.browser.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/encodePacket.browser.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/encodePacket.browser.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodePacket = void 0;\nexports.encodePacketToBinary = encodePacketToBinary;\nconst commons_js_1 = __webpack_require__(/*! ./commons.js */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js\");\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(commons_js_1.PACKET_TYPES[type] + (data || \"\"));\n};\nexports.encodePacket = encodePacket;\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nfunction encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/encodePacket.browser.js?");

/***/ }),

/***/ "./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\nexports.createPacketEncoderStream = createPacketEncoderStream;\nexports.createPacketDecoderStream = createPacketDecoderStream;\nconst encodePacket_js_1 = __webpack_require__(/*! ./encodePacket.js */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/encodePacket.browser.js\");\nObject.defineProperty(exports, \"encodePacket\", ({ enumerable: true, get: function () { return encodePacket_js_1.encodePacket; } }));\nconst decodePacket_js_1 = __webpack_require__(/*! ./decodePacket.js */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/decodePacket.browser.js\");\nObject.defineProperty(exports, \"decodePacket\", ({ enumerable: true, get: function () { return decodePacket_js_1.decodePacket; } }));\nconst commons_js_1 = __webpack_require__(/*! ./commons.js */ \"./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js\");\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        (0, encodePacket_js_1.encodePacket)(packet, false, (encodedPacket) => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexports.decodePayload = decodePayload;\nfunction createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            (0, encodePacket_js_1.encodePacketToBinary)(packet, (encodedPacket) => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        },\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nfunction createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* State.READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* State.READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(commons_js_1.ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue((0, decodePacket_js_1.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* State.READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(commons_js_1.ERROR_PACKET);\n                    break;\n                }\n            }\n        },\n    });\n}\nexports.protocol = 4;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/contrib/backo2.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/contrib/backo2.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Backoff = Backoff;\nfunction Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/contrib/backo2.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/index.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebTransport = exports.WebSocket = exports.NodeWebSocket = exports.XHR = exports.NodeXHR = exports.Fetch = exports.Socket = exports.Manager = exports.protocol = void 0;\nexports.io = lookup;\nexports.connect = lookup;\nexports[\"default\"] = lookup;\nconst url_js_1 = __webpack_require__(/*! ./url.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/url.js\");\nconst manager_js_1 = __webpack_require__(/*! ./manager.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/manager.js\");\nObject.defineProperty(exports, \"Manager\", ({ enumerable: true, get: function () { return manager_js_1.Manager; } }));\nconst socket_js_1 = __webpack_require__(/*! ./socket.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js\");\nObject.defineProperty(exports, \"Socket\", ({ enumerable: true, get: function () { return socket_js_1.Socket; } }));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-client\"); // debug()\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = (0, url_js_1.url)(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        debug(\"ignoring socket cache for %s\", source);\n        io = new manager_js_1.Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            debug(\"new io instance for %s\", source);\n            cache[id] = new manager_js_1.Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager: manager_js_1.Manager,\n    Socket: socket_js_1.Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nvar socket_io_parser_1 = __webpack_require__(/*! socket.io-parser */ \"./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js\");\nObject.defineProperty(exports, \"protocol\", ({ enumerable: true, get: function () { return socket_io_parser_1.protocol; } }));\nvar engine_io_client_1 = __webpack_require__(/*! engine.io-client */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js\");\nObject.defineProperty(exports, \"Fetch\", ({ enumerable: true, get: function () { return engine_io_client_1.Fetch; } }));\nObject.defineProperty(exports, \"NodeXHR\", ({ enumerable: true, get: function () { return engine_io_client_1.NodeXHR; } }));\nObject.defineProperty(exports, \"XHR\", ({ enumerable: true, get: function () { return engine_io_client_1.XHR; } }));\nObject.defineProperty(exports, \"NodeWebSocket\", ({ enumerable: true, get: function () { return engine_io_client_1.NodeWebSocket; } }));\nObject.defineProperty(exports, \"WebSocket\", ({ enumerable: true, get: function () { return engine_io_client_1.WebSocket; } }));\nObject.defineProperty(exports, \"WebTransport\", ({ enumerable: true, get: function () { return engine_io_client_1.WebTransport; } }));\n\nmodule.exports = lookup;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/manager.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/manager.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Manager = void 0;\nconst engine_io_client_1 = __webpack_require__(/*! engine.io-client */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js\");\nconst socket_js_1 = __webpack_require__(/*! ./socket.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js\");\nconst parser = __importStar(__webpack_require__(/*! socket.io-parser */ \"./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js\"));\nconst on_js_1 = __webpack_require__(/*! ./on.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js\");\nconst backo2_js_1 = __webpack_require__(/*! ./contrib/backo2.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/contrib/backo2.js\");\nconst component_emitter_1 = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-client:manager\"); // debug()\nclass Manager extends component_emitter_1.Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        (0, engine_io_client_1.installTimerFunctions)(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new backo2_js_1.Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = new engine_io_client_1.Socket(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = (0, on_js_1.on)(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            debug(\"error\");\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = (0, on_js_1.on)(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push((0, on_js_1.on)(socket, \"ping\", this.onping.bind(this)), (0, on_js_1.on)(socket, \"data\", this.ondata.bind(this)), (0, on_js_1.on)(socket, \"error\", this.onerror.bind(this)), (0, on_js_1.on)(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        (0, on_js_1.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        (0, engine_io_client_1.nextTick)(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        debug(\"error\", err);\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_js_1.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        debug(\"closed due to %s\", reason);\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                debug(\"attempting reconnect\");\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\nexports.Manager = Manager;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/manager.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.on = on;\nfunction on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Socket = void 0;\nconst socket_io_parser_1 = __webpack_require__(/*! socket.io-parser */ \"./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js\");\nconst on_js_1 = __webpack_require__(/*! ./on.js */ \"./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js\");\nconst component_emitter_1 = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            (0, on_js_1.on)(io, \"open\", this.onopen.bind(this)),\n            (0, on_js_1.on)(io, \"packet\", this.onpacket.bind(this)),\n            (0, on_js_1.on)(io, \"error\", this.onerror.bind(this)),\n            (0, on_js_1.on)(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    debug(\"removing packet with ack id %d from the buffer\", id);\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    debug(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                debug(\"packet [%d] was successfully sent\", packet.id);\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        debug(\"draining queue\");\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            debug(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        debug(\"sending packet [%d] (try n°%d)\", packet.id, packet.tryCount);\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            debug(\"bad ack %s\", packet.id);\n            return;\n        }\n        delete this.acks[packet.id];\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\nexports.Socket = Socket;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/url.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/url.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.url = url;\nconst engine_io_client_1 = __webpack_require__(/*! engine.io-client */ \"./node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\")); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-client:url\"); // debug()\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            debug(\"protocol-less url %s\", uri);\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        debug(\"parse %s\", uri);\n        obj = (0, engine_io_client_1.parse)(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/url.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/binary.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/binary.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.reconstructPacket = exports.deconstructPacket = void 0;\nconst is_binary_js_1 = __webpack_require__(/*! ./is-binary.js */ \"./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js\");\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nfunction deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nexports.deconstructPacket = deconstructPacket;\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if ((0, is_binary_js_1.isBinary)(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nfunction reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nexports.reconstructPacket = reconstructPacket;\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/binary.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nconst component_emitter_1 = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js\");\nconst binary_js_1 = __webpack_require__(/*! ./binary.js */ \"./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/binary.js\");\nconst is_binary_js_1 = __webpack_require__(/*! ./is-binary.js */ \"./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"./node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js\"); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-parser\"); // debug()\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        debug(\"encoding packet %j\", obj);\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if ((0, is_binary_js_1.hasBinary)(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        debug(\"encoded %j as %s\", obj, str);\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = (0, binary_js_1.deconstructPacket)(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\nexports.Encoder = Encoder;\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends component_emitter_1.Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if ((0, is_binary_js_1.isBinary)(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        debug(\"decoded %s as %j\", str, p);\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\nexports.Decoder = Decoder;\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = (0, binary_js_1.reconstructPacket)(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasBinary = exports.isBinary = void 0;\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nfunction isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexports.isBinary = isBinary;\nfunction hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hasBinary = hasBinary;\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js?");

/***/ }),

/***/ "./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emitter: () => (/* binding */ Emitter)\n/* harmony export */ });\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n\n//# sourceURL=webpack://term-project-yas-kween/./node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/client/main.ts");
/******/ 	
/******/ })()
;

================
File: src/server/config/database.ts
================
import pgPromise from 'pg-promise';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const pgp = pgPromise({
  // Initialization options
  capSQL: true, // capitalize SQL queries
  // Add event handlers here
  error: (err, e) => {
    if (e.cn) {
      // Connection-related error
      console.error('Database connection error:', err);
    } else {
      // Query-related error
      console.error('Database query error:', err);
    }
  },
});

// Database connection configuration
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432', 10),
  database: process.env.DB_NAME || 'sequence_game',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '',
  max: 30, // Maximum number of connection pool clients
  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed
};

// Create the database instance with a connection pool
const db = pgp(dbConfig);

// Test the connection
db.connect()
  .then((obj) => {
    console.log('Database connection successful');
    obj.done(); // success, release the connection
  })
  .catch((error) => {
    console.error('Database connection error:', error);
  });

export { db, pgp };

================
File: src/server/config/index.ts
================
export { default as configureLiveReload } from "./livereload";
export { default as configureSession } from "./session";
export { default as configureSocketIO } from "./sockets";

================
File: src/server/config/livereload.ts
================
import connectLiveReload from "connect-livereload";
import type { Express } from "express";
import livereload from "livereload";

const configureLiveReload = (app: Express, staticPath: string) => {
  if (process.env.NODE_ENV === "development") {
    const reloadServer = livereload.createServer();

    reloadServer.watch(staticPath);
    reloadServer.server.once("connection", () => {
      setTimeout(() => {
        reloadServer.refresh("/");
      }, 100);
    });
    app.use(connectLiveReload());
  }
};

export default configureLiveReload;

================
File: src/server/config/session.ts
================
import connectPgSimple from "connect-pg-simple";
import type { Express, RequestHandler } from "express";
import flash from "express-flash";
import session from "express-session";

let sessionMiddleware: RequestHandler | undefined = undefined;

export default (app: Express): RequestHandler => {
  if (sessionMiddleware === undefined) {
    sessionMiddleware = session({
      store: new (connectPgSimple(session))({
        createTableIfMissing: true,
        conObject: {
          host: process.env.DB_HOST || 'localhost',
          port: parseInt(process.env.DB_PORT || '5432', 10),
          database: process.env.DB_NAME || 'sequence_game',
          user: process.env.DB_USER || 'postgres',
          password: process.env.DB_PASSWORD || ''
        }
      }),
      secret: process.env.SESSION_SECRET!,
      resave: true,
      saveUninitialized: true,
      cookie: {
        secure: process.env.NODE_ENV === 'production', // Use secure cookies in production
        httpOnly: true, // Prevent client-side access
        maxAge: 24 * 60 * 60 * 1000, // 1 day
      },
    });

    app.use(sessionMiddleware);
    app.use(flash());
  }

  // for debugging
  app.use((req, res, next) => {
    console.log("Session Middleware Invoked:");
    console.log("Session Data Before Route:", req.session);
    next();
  });

  // for debugging
  app.use((req, res, next) => {
    console.log("Session Store Check:", req.sessionStore);
    next();
  });



  return sessionMiddleware;
};

================
File: src/server/config/socket.ts
================
import { Server as HttpServer } from 'http';
import { Server as SocketServer } from 'socket.io';
import { verify } from 'jsonwebtoken';
import { UserModel } from '../models/user';

export const configureSocketIO = (server: HttpServer) => {
  const io = new SocketServer(server, {
    cors: {
      origin: process.env.NODE_ENV === 'production'
        ? process.env.CORS_ORIGIN
        : 'http://localhost:3000',
      methods: ['GET', 'POST'],
      credentials: true
    }
  });

  // Global middleware for authentication
  io.use(async (socket, next) => {
    try {
      const token = socket.handshake.auth.token;
      
      if (!token) {
        next(new Error('Authentication required'));
        return;
      }

      const decoded = verify(token, process.env.JWT_SECRET!) as { userId: string };
      const user = await UserModel.findById(decoded.userId);
      
      if (!user) {
        next(new Error('User not found'));
        return;
      }

      // Attach user data to socket
      socket.data.user = {
        id: user.id,
        username: user.username,
        email: user.email
        // Add any other properties needed
      };

      next();
    } catch (error) {
      next(new Error('Authentication failed'));
    }
  });

  // Set up game handlers
  setupGameHandlers(io);

  // Error handling
  io.on('error', (error) => {
    console.error('Socket.IO error:', error);
  });

  return io;
}; 

function setupGameHandlers(io: SocketServer<import("socket.io").DefaultEventsMap, import("socket.io").DefaultEventsMap, import("socket.io").DefaultEventsMap, any>) {
    throw new Error('Function not implemented.');
}

================
File: src/server/config/sockets.ts
================
import { Server } from "http";
import type { Express, RequestHandler } from "express";
import { Server as SocketIoServer, Socket } from "socket.io";

let io: SocketIoServer | undefined;

const bindSession = async (socket: Socket) => {
  const { request } = socket;

  const {
    user = { id: undefined },
    roomId,
    // @ts-expect-error TODO figure out the typing for session on request
  } = request.session;

  // TODO there's a bug here; if the user has created a game, the game id is not yet parsed from the url parameters
  socket.join(`user-${user.id}`);
  socket.join(`chat-${roomId}`);
  socket.join(`game-${roomId}`);

  socket.use((_, next) => {
    // @ts-expect-error TODO figure out the typing for session on request
    request.session.reload((error) => {
      if (error) {
        socket.disconnect();
      } else {
        next();
      }
    });
  });
};

export default function (
  server: Server,
  app: Express,
  sessionMiddleware: RequestHandler,
): SocketIoServer {
  if (io === undefined) {
    io = new SocketIoServer(server);

    app.set("io", io);
    io.engine.use(sessionMiddleware);

    io.on("connection", async (socket) => {
      await bindSession(socket);

      // @ts-expect-error TODO figure out the typing for session on request
      console.log(`client connected (${socket.request.session.id})`);

      socket.on("disconnect", () => {
        // @ts-expect-error TODO figure out the typing for session on request
        console.log(`client disconnected (${socket.request.session.id})`);
      });
    });
  }

  return io;
}

================
File: src/server/constants/gameConfig.ts
================
import { Card } from '../models/game';

export const BOARD_SIZE = 10;
export const SEQUENCE_LENGTH = 5;
export const MAX_PLAYERS = 4;
export const MIN_PLAYERS = 2;
export const CARDS_PER_PLAYER = 7;

// Define the board layout with card positions
export const BOARD_LAYOUT: Array<Array<Card | null>> = [
  // First row (0)
  [
    { suit: 'hearts', value: '2' },
    { suit: 'hearts', value: '3' },
    { suit: 'hearts', value: '4' },
    { suit: 'hearts', value: '5' },
    { suit: 'hearts', value: '6' },
    { suit: 'hearts', value: '7' },
    { suit: 'hearts', value: '8' },
    { suit: 'hearts', value: '9' },
    { suit: 'hearts', value: '10' },
    { suit: 'hearts', value: 'J' }
  ],
  // Second row (1)
  [
    { suit: 'diamonds', value: '6' },
    { suit: 'diamonds', value: '5' },
    { suit: 'diamonds', value: '4' },
    { suit: 'diamonds', value: '3' },
    { suit: 'diamonds', value: '2' },
    { suit: 'hearts', value: 'Q' },
    { suit: 'hearts', value: 'K' },
    { suit: 'hearts', value: 'A' },
    { suit: 'clubs', value: '2' },
    { suit: 'clubs', value: '3' }
  ],
  // Third row (2)
  [
    { suit: 'diamonds', value: '7' },
    { suit: 'spades', value: 'A' },
    { suit: 'spades', value: 'K' },
    { suit: 'spades', value: 'Q' },
    { suit: 'spades', value: 'J' },
    { suit: 'spades', value: '10' },
    { suit: 'spades', value: '9' },
    { suit: 'clubs', value: 'A' },
    { suit: 'clubs', value: '4' },
    { suit: 'clubs', value: '5' }
  ],
  // Fourth row (3)
  [
    { suit: 'diamonds', value: '8' },
    { suit: 'spades', value: '2' },
    { suit: 'diamonds', value: 'K' },
    { suit: 'diamonds', value: 'Q' },
    { suit: 'diamonds', value: 'J' },
    { suit: 'diamonds', value: '10' },
    { suit: 'spades', value: '8' },
    { suit: 'clubs', value: 'K' },
    { suit: 'clubs', value: '6' },
    { suit: 'clubs', value: '7' }
  ],
  // Fifth row (4)
  [
    { suit: 'diamonds', value: '9' },
    { suit: 'spades', value: '3' },
    { suit: 'diamonds', value: 'A' },
    null, // Corner
    { suit: 'hearts', value: 'A' },
    { suit: 'spades', value: 'A' },
    { suit: 'spades', value: '7' },
    { suit: 'clubs', value: 'Q' },
    { suit: 'clubs', value: '8' },
    { suit: 'clubs', value: '9' }
  ],
  // Sixth row (5)
  [
    { suit: 'diamonds', value: '10' },
    { suit: 'spades', value: '4' },
    { suit: 'hearts', value: 'K' },
    { suit: 'hearts', value: 'Q' },
    null, // Corner
    null, // Corner
    { suit: 'spades', value: '6' },
    { suit: 'clubs', value: 'J' },
    { suit: 'clubs', value: '9' },
    { suit: 'clubs', value: '10' }
  ],
  // Seventh row (6)
  [
    { suit: 'diamonds', value: 'J' },
    { suit: 'spades', value: '5' },
    { suit: 'hearts', value: 'J' },
    { suit: 'hearts', value: '10' },
    { suit: 'hearts', value: '9' },
    { suit: 'spades', value: 'A' },
    { suit: 'spades', value: '5' },
    { suit: 'clubs', value: '10' },
    { suit: 'clubs', value: 'J' },
    { suit: 'clubs', value: 'Q' }
  ],
  // Eighth row (7)
  [
    { suit: 'diamonds', value: 'Q' },
    { suit: 'spades', value: '6' },
    { suit: 'hearts', value: '8' },
    { suit: 'hearts', value: '7' },
    { suit: 'hearts', value: '6' },
    { suit: 'hearts', value: '5' },
    { suit: 'spades', value: '4' },
    { suit: 'clubs', value: '9' },
    { suit: 'clubs', value: 'K' },
    { suit: 'clubs', value: 'K' }
  ],
  // Ninth row (8)
  [
    { suit: 'diamonds', value: 'K' },
    { suit: 'spades', value: '7' },
    { suit: 'hearts', value: '5' },
    { suit: 'hearts', value: '4' },
    { suit: 'hearts', value: '3' },
    { suit: 'hearts', value: '2' },
    { suit: 'spades', value: '3' },
    { suit: 'clubs', value: '8' },
    { suit: 'clubs', value: 'A' },
    { suit: 'clubs', value: 'A' }
  ],
  // Tenth row (9)
  [
    { suit: 'diamonds', value: 'A' },
    { suit: 'spades', value: '8' },
    { suit: 'spades', value: '9' },
    { suit: 'spades', value: '10' },
    { suit: 'spades', value: 'J' },
    { suit: 'spades', value: 'Q' },
    { suit: 'spades', value: '2' },
    { suit: 'clubs', value: '7' },
    { suit: 'clubs', value: '6' },
    { suit: 'clubs', value: '5' }
  ]
];

// Define corner positions
export const CORNER_POSITIONS = [
  { x: 3, y: 4 },
  { x: 4, y: 4 },
  { x: 4, y: 5 },
  { x: 5, y: 4 }
];

// Define player colors
export const PLAYER_COLORS = ['red', 'blue', 'green', 'yellow'];

// Define card deck configuration
export const DECK_CONFIG = {
  suits: ['hearts', 'diamonds', 'clubs', 'spades'] as const,
  values: ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'] as const,
  // Each value appears twice in the deck except for Jacks
  duplicatevalues: true,
  // Number of decks to use
  deckCount: 2
};

================
File: src/server/db.ts
================
// Database connection logic

================
File: src/server/index.js
================
"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const root_1 = __importDefault(require("./routes/root"));
const http_errors_1 = __importDefault(require("http-errors"));
const time_1 = require("./middleware/time");
const morgan_1 = __importDefault(require("morgan"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const path_1 = __importDefault(require("path"));
const connect_livereload_1 = __importDefault(require("connect-livereload"));
const livereload_1 = __importDefault(require("livereload"));
const app = (0, express_1.default)();
const PORT = process.env.PORT || 3000;
//Middleware for logging
app.use((0, morgan_1.default)("dev"));
//Middleware for parsing cookies
app.use((0, cookie_parser_1.default)());
//Middleware for parsing JSON
app.use(express_1.default.json());
//Middleware for parsing URL-encoded data
app.use(express_1.default.urlencoded({ extended: false }));
//Middleware for serving static files
app.use(
  express_1.default.static(path_1.default.join(process.cwd(), "src", "public")),
);
app.use(time_1.timeMiddleware);
const staticPath = path_1.default.join(process.cwd(), "src", "public");
app.use(express_1.default.static(staticPath));
if (process.env.NODE_ENV === "development") {
  const reloadServer = livereload_1.default.createServer();
  reloadServer.watch(staticPath);
  reloadServer.server.once("connection", () => {
    setTimeout(() => {
      reloadServer.refresh("/");
    }, 100);
  });
  app.use((0, connect_livereload_1.default)());
}
//Routes
app.use("/", root_1.default);
//Error handling
app.use((_req, _res, next) => {
  next((0, http_errors_1.default)(404));
});
//Views setupt
app.set("views", path_1.default.join(process.cwd(), "src", "server", "views"));
app.set("view engine", "ejs");
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

================
File: src/server/index.ts
================
import cookieParser from "cookie-parser";
import dotenv from "dotenv";
import express from "express";
import morgan from "morgan";
import * as path from "path";
import { createServer } from "http";
import { Server, Socket } from "socket.io";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import cors from "cors";
import { IncomingMessage } from "http";
import { SessionData } from "express-session";

// Extend IncomingMessage to include session
interface SessionIncomingMessage extends IncomingMessage {
  session: SessionData;
}

// Extend Socket type to include session
interface SessionSocket extends Socket {
  request: IncomingMessage & {
    session: SessionData;
  };
}

dotenv.config();

import * as configuration from "./config";
import { errorHandler, notFoundHandler } from "./middleware/error";
import { authenticate, optionalAuthenticate } from "./middleware/auth";
import authRoutes from "./routes/auth";
import mainLobbyRouter from "./routes/main-lobby";

const app = express();
const server = createServer(app);
//const io = new Server(server);
export const io = new Server(server);


const PORT = process.env.PORT || 3000;



app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "ws:", "wss:"],
      fontSrc: ["'self'", "https:", "data:"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'self'"],
    },
  },
}));
app.use(cors({
  origin: process.env.NODE_ENV === "production"
    ? process.env.CORS_ORIGIN
    : "http://localhost:3000",
  credentials: true
}));

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use("/api/", limiter);

app.use(morgan("dev"));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Set up view engine
app.set("views", path.join(process.cwd(), "src", "views"));
app.set("view engine", "ejs");

// Serve static files with explicit MIME types
app.use(express.static(path.join(process.cwd(), "src", "public"), {
  setHeaders: (res, path) => {
    if (path.endsWith('.css')) {
      res.setHeader('Content-Type', 'text/css');
    }
  }
}));

// Set up Socket.IO with session support
const sessionMiddleware = configuration.configureSession(app);

const wrap = (middleware: any) => (socket: any, next: any) => middleware(socket.request, {}, next);

io.use(wrap(sessionMiddleware));
io.use((socket, next) => {
  const session = (socket as SessionSocket).request.session;
  if (session && session.user) {
    next();
  } else {
    next(new Error("Authentication required"));
  }
});

io.on("connection", (socket) => {
  console.log("Client connected:", socket.id);
  
  // Attach user data to socket
  const user = (socket as SessionSocket).request.session.user;
  socket.data.user = user;
  
  socket.on("disconnect", () => {
    console.log("Client disconnected:", socket.id);
  });

  // Game-specific events will be added here
});

app.use("/api/auth", authRoutes);
app.use("/auth", authRoutes);
app.use("/api/games", authenticate, /* games router */);
app.use("/api/users", authenticate, /* users router */);

// Use main-lobby router for root path
app.use("/", optionalAuthenticate, mainLobbyRouter);

app.use(notFoundHandler);
app.use(errorHandler);

server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV}`);
});

================
File: src/server/middleware/auth.ts
================
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { UserModel } from '../models/user';

// Extend Express Request type to include user
declare global {
  namespace Express {
    interface Request {
      user?: {
        id: string;
        username: string;
        email: string;
        // Add any other properties needed
      };
    }
  }
}

/**
 * Authentication middleware to protect routes
 */
export const authenticate = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      res.status(401).json({ error: 'No token provided' });
      return;
    }

    const [bearer, token] = authHeader.split(' ');
    
    if (bearer !== 'Bearer' || !token) {
      res.status(401).json({ error: 'Invalid token format' });
      return;
    }

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };
      const user = await UserModel.findById(decoded.userId);
      
      if (!user) {
        res.status(401).json({ error: 'User not found' });
        return;
      }

      // Add user to request object without password hash
      const { password_hash, ...userWithoutPassword } = user;
      req.user = userWithoutPassword;
      
      next();
    } catch (error) {
      if (error instanceof jwt.TokenExpiredError) {
        res.status(401).json({ error: 'Token expired' });
      } else {
        res.status(401).json({ error: 'Invalid token' });
      }
    }
  } catch (error) {
    next(error);
  }
};

/**
 * Optional authentication middleware that doesn't require authentication
 * but will add user to request if token is valid
 */
export const optionalAuthenticate = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      next();
      return;
    }

    const [bearer, token] = authHeader.split(' ');
    
    if (bearer !== 'Bearer' || !token) {
      next();
      return;
    }

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };
      const user = await UserModel.findById(decoded.userId);
      
      if (user) {
        // Add user to request object without password hash
        const { password_hash, ...userWithoutPassword } = user;
        req.user = userWithoutPassword;
      }
    } catch (error) {
      // Ignore token validation errors in optional authentication
    }
    
    next();
  } catch (error) {
    next(error);
  }
};

/**
 * Middleware to validate refresh tokens
 */
export const validateRefreshToken = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { refreshToken } = req.body;
    
    if (!refreshToken) {
      res.status(400).json({ error: 'Refresh token required' });
      return;
    }

    const result = await UserModel.refreshToken(refreshToken);
    
    if (!result) {
      res.status(401).json({ error: 'Invalid refresh token' });
      return;
    }

    res.json(result);
  } catch (error) {
    next(error);
  }
};

export const verifyToken = async (token: string): Promise<{ id: string; username: string; email: string; } | null> => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };
    const user = await UserModel.findById(decoded.userId);
    
    if (!user) {
      return null;
    }

    const { password_hash, ...userWithoutPassword } = user;
    return userWithoutPassword;
  } catch (error) {
    return null;
  }
};

================
File: src/server/middleware/authentication.ts
================
import { NextFunction, Request, Response } from "express";

const authenticationMiddleware = (
  request: Request,
  response: Response,
  next: NextFunction,
) => {
  // @ts-expect-error TODO: Define the session type for the user object
  if (!request.session.user) {
    response.redirect("/auth/login");
  } else {
    // @ts-expect-error TODO: Define the session type for the user object
    response.locals.user = request.session.user;
    next();
  }
};

export default authenticationMiddleware;

================
File: src/server/middleware/chat.ts
================
import { NextFunction, Request, Response } from "express";

const chatMiddleware = (
  request: Request,
  response: Response,
  next: NextFunction,
) => {
  const gameIdMatch = request.headers.referer?.match(/\/games\/(\d+)/);
  const gameId = parseInt(gameIdMatch ? gameIdMatch[1] : "0");

  // @ts-expect-error TODO figure out the typing for session on request
  request.session.roomId = gameId;

  if (gameId !== undefined) {
    response.locals.roomId = gameId;
  } else {
    response.locals.roomId = 0;
  }

  next();
};

export default chatMiddleware;

================
File: src/server/middleware/error.ts
================
import { Request, Response, NextFunction } from 'express';
import expressValidator from 'express-validator';
import { JsonWebTokenError } from 'jsonwebtoken';

interface ErrorWithStatus extends Error {
  status?: number;
  statusCode?: number;
  errors?: expressValidator.ValidationError[];
}

/**
 * Custom error handler middleware
 */
export const errorHandler = (
  err: ErrorWithStatus,
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  console.error(err);

  // Handle validation errors
  if (err.errors && Array.isArray(err.errors)) {
    res.status(400).json({
      error: 'Validation Error',
      details: err.errors.map(error => ({
        field: error.type,
        message: error.msg 
      }))
    });
    return;
  }

  // Handle JWT errors
  if (err instanceof JsonWebTokenError) {
    res.status(401).json({
      error: 'Authentication Error',
      message: 'Invalid or expired token'
    });
    return;
  }

  // Handle known errors with status codes
  const statusCode = err.status || err.statusCode || 500;
  const message = err.message || 'Internal Server Error';

  res.status(statusCode).json({
    error: statusCode === 500 ? 'Internal Server Error' : message,
    message: statusCode === 500 ? 'An unexpected error occurred' : message
  });
};

/**
 * Not found error handler
 */
export const notFoundHandler = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  next(createError(404, 'Resource not found'));
};

/**
 * Async error wrapper to handle promise rejections
 */
export const asyncHandler = (fn: Function) => (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  Promise.resolve(fn(req, res, next)).catch(next);
}; 

function createError(status: number, message: string): ErrorWithStatus {
  const error: ErrorWithStatus = new Error(message);
  error.status = status;
  return error;
}

================
File: src/server/middleware/index.ts
================
export { default as authentication } from "./authentication";
export { default as chat } from "./chat";
export { default as tailwind } from "./tailwind-util";

================
File: src/server/middleware/tailwind-util.ts
================
import { NextFunction, Request, Response } from "express";
import clsx from "clsx";
import { twMerge } from "tailwind-merge";

const cn = (...args: string[]) => twMerge(clsx(...args));

const tailwindMiddleware = (
  _request: Request,
  response: Response,
  next: NextFunction,
) => {
  response.locals.cn = cn;
  next();
};

export default tailwindMiddleware;

================
File: src/server/middleware/time.js
================
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeMiddleware = void 0;
const timeMiddleware = (req, res, next) => {
  console.log(`Time: ${new Date()}`);
  next();
};
exports.timeMiddleware = timeMiddleware;

================
File: src/server/middleware/time.ts
================
import { NextFunction, Request, Response } from "express";
const timeMiddleware = (req: Request, res: Response, next: NextFunction) => {
  console.log(`Time: ${new Date()}`);
  next();
};
export { timeMiddleware };

================
File: src/server/middleware/validationMiddleware.js
================
"use strict";
// Middleware to validate incoming requests

================
File: src/server/middleware/validationMiddleware.ts
================
// Middleware to validate incoming requests

================
File: src/server/models/game.ts
================
import { db } from '../config/database';
import {
  BOARD_LAYOUT,
  BOARD_SIZE,
  SEQUENCE_LENGTH,
  MAX_PLAYERS,
  MIN_PLAYERS,
  CARDS_PER_PLAYER,
  CORNER_POSITIONS,
  DECK_CONFIG
} from '../constants/gameConfig';



export interface Card {
  suit: string;
  value: string;
}

export interface Position {
  x: number;
  y: number;
}

export interface GameState {
  board: Array<Array<Card | null>>;
  chips: Array<Array<string | null>>; // Player color or null
  currentPlayerIndex: number;
  players: Array<{
    id: string;
    username: string;
    cards: Card[];
    chips: Position[];
    color: string;
  }>;
  deck: Card[];
  player_count: number;
  status: 'waiting' | 'in_progress' | 'completed' | 'cancelled';
  winner?: string;
}

export interface GameMove {
  id: string;
  gameId: string;
  userId: string;
  cardPlayed: Card;
  position: Position;
  createdAt: Date;
}

export class GameModel {
  /**
   * Fetch available games with `waiting` status
   */
  static async availableGames(): Promise<
      Array<{ id: string; players: number; player_count: number }>
  > {
    return db.manyOrNone(
        `
    SELECT g.id, COUNT(gp.id) AS players, g.player_count
    FROM games g
    LEFT JOIN game_players gp ON g.id = gp.game_id
    WHERE g.status = 'waiting'
    GROUP BY g.id, g.player_count
    ORDER BY g.created_at DESC
    `
    );
  }

  /**
   * Fetch games joined by a specific user
   */
  static async playerGames(
      userId: string
  ): Promise<Record<string, boolean>> {
    const games = await db.manyOrNone(
        `
    SELECT game_id
    FROM game_players
    WHERE user_id = $1
    `,
        [userId]
    );

    // Convert result to a map of game IDs for quick lookup
    return games.reduce((acc: Record<string, boolean>, game) => {
      acc[game.game_id] = true;
      return acc;
    }, {});
  }

  /**
   * Create a new game
   */
  static async create(creatorId: string): Promise<{ id: string; state: GameState }> {
    const initialState: GameState = {
      board: BOARD_LAYOUT,
      chips: Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(null)),
      currentPlayerIndex: 0,
      players: [{
        id: creatorId,
        username: '', // Will be populated after creation
        cards: [],
        chips: [],
        color: 'red',
      }],
      deck: this.createDeck(),
      status: 'waiting',
      player_count: 1, // Initialize with the creator as the first player
    };

    const game = await db.one<{ id: string; board_state: GameState }>(
        `
    INSERT INTO games (board_state, status)
    VALUES ($1, $2)
    RETURNING id, board_state
    `,
        [initialState, 'waiting']
    );

    // Add creator as the first player
    await db.none(
        `
    INSERT INTO game_players (game_id, user_id, player_index, cards)
    VALUES ($1, $2, $3, $4)
    `,
        [game.id, creatorId, 0, []]
    );

    return { id: game.id, state: game.board_state };
  }


  /**
   * Join a game
   */
  static async join(gameId: string, userId: string): Promise<GameState> {
    const game = await db.one<{ board_state: GameState }>(
        `
    SELECT board_state
    FROM games
    WHERE id = $1 AND status = 'waiting'
    `,
        [gameId]
    );

    if (game.board_state.players.length >= MAX_PLAYERS) {
      throw new Error('Game is full');
    }

    if (game.board_state.players.some(p => p.id === userId)) {
      throw new Error('Player already in game');
    }

    const playerIndex = game.board_state.players.length;
    const playerColor = ['red', 'blue', 'green', 'yellow'][playerIndex];

    game.board_state.players.push({
      id: userId,
      username: '', // Will be populated after join
      cards: [],
      chips: [],
      color: playerColor,
    });

    // Update player_count
    game.board_state.player_count = game.board_state.players.length;

    // Add player to game
    await db.none(
        `
    INSERT INTO game_players (game_id, user_id, player_index, cards)
    VALUES ($1, $2, $3, $4)
    `,
        [gameId, userId, playerIndex, []]
    );

    // Update game state
    await db.none(
        `
    UPDATE games
    SET board_state = $1
    WHERE id = $2
    `,
        [game.board_state, gameId]
    );

    return game.board_state;
  }


  /**
   * Start a game
   */
  static async start(gameId: string): Promise<GameState> {
    const game = await db.one<{ board_state: GameState }>(
      `
      SELECT board_state
      FROM games
      WHERE id = $1 AND status = 'waiting'
      `,
      [gameId]
    );

    if (game.board_state.players.length < MIN_PLAYERS) {
      throw new Error('Not enough players');
    }

    // Deal cards to players
    const deck = this.shuffleDeck(game.board_state.deck);
    
    game.board_state.players.forEach((player) => {
      player.cards = deck.splice(0, CARDS_PER_PLAYER);
    });

    game.board_state.deck = deck;
    game.board_state.status = 'in_progress';

    // Update game state and status
    await db.none(
      `
      UPDATE games
      SET board_state = $1, status = 'in_progress'
      WHERE id = $2
      `,
      [game.board_state, gameId]
    );

    // Update player cards
    for (const player of game.board_state.players) {
      await db.none(
        `
        UPDATE game_players
        SET cards = $1
        WHERE game_id = $2 AND user_id = $3
        `,
        [player.cards, gameId, player.id]
      );
    }

    return game.board_state;
  }

  /**
   * Make a move in the game
   */
  static async makeMove(
    gameId: string,
    userId: string,
    card: Card,
    position: Position
  ): Promise<GameState> {
    const game = await db.one<{ board_state: GameState }>(
      `
      SELECT board_state
      FROM games
      WHERE id = $1 AND status = 'in_progress'
      `,
      [gameId]
    );

    const playerIndex = game.board_state.players.findIndex(p => p.id === userId);
    
    if (playerIndex === -1) {
      throw new Error('Player not in game');
    }

    if (playerIndex !== game.board_state.currentPlayerIndex) {
      throw new Error('Not your turn');
    }

    if (!this.isValidMove(game.board_state, card, position)) {
      throw new Error('Invalid move');
    }

    // Record the move
    await db.none(
      `
      INSERT INTO game_moves (game_id, user_id, card_played, position)
      VALUES ($1, $2, $3, $4)
      `,
      [gameId, userId, card, position]
    );

    // Update game state
    const player = game.board_state.players[playerIndex];
    
    // Remove card from player's hand
    player.cards = player.cards.filter(c => 
      !(c.suit === card.suit && c.value === card.value)
    );
    
    // Add chip to board
    game.board_state.chips[position.y][position.x] = player.color;
    player.chips.push(position);

    // Draw a new card if deck is not empty
    if (game.board_state.deck.length > 0) {
      player.cards.push(game.board_state.deck.pop()!);
    }

    // Check for win condition
    if (this.checkWinCondition(game.board_state.chips, player.color)) {
      game.board_state.status = 'completed';
      game.board_state.winner = userId;
    } else {
      // Move to next player
      game.board_state.currentPlayerIndex = 
        (game.board_state.currentPlayerIndex + 1) % game.board_state.players.length;
    }

    // Update game state in database
    await db.none(
      `
      UPDATE games
      SET board_state = $1, status = $2, winner_id = $3
      WHERE id = $4
      `,
      [
        game.board_state,
        game.board_state.status,
        game.board_state.winner || null,
        gameId
      ]
    );

    // Update player cards
    await db.none(
      `
      UPDATE game_players
      SET cards = $1
      WHERE game_id = $2 AND user_id = $3
      `,
      [player.cards, gameId, userId]
    );

    return game.board_state;
  }

  /**
   * Get current game state
   */
  static async getState(gameId: string): Promise<GameState> {
    const game = await db.one<{ board_state: GameState }>(
      `
      SELECT board_state
      FROM games
      WHERE id = $1
      `,
      [gameId]
    );

    return game.board_state;
  }

  /**
   * List available games
   */
  static async listGames(): Promise<Array<{
    id: string;
    playerCount: number;
    status: string;
    createdAt: Date;
  }>> {
    const result = await db.query(`
    SELECT g.id, 
           COUNT(gp.id) as player_count, 
           g.status, 
           g.created_at
    FROM games g
    LEFT JOIN game_players gp ON g.id = gp.game_id
    WHERE g.status = 'waiting'
    GROUP BY g.id
    ORDER BY g.created_at DESC
  `);

    return result.rows.map((row: { id: string; player_count: string; status: string; created_at: Date }) => ({
      id: row.id,
      playerCount: parseInt(row.player_count, 10),
      status: row.status,
      createdAt: row.created_at,
    }));
  }


  // Helper methods

  private static createDeck(): Card[] {
    const deck: Card[] = [];
    const { suits, values, duplicatevalues, deckCount } = DECK_CONFIG;

    for (let deckIndex = 0; deckIndex < deckCount; deckIndex++) {
      for (const suit of suits) {
        for (const value of values) {
          // Add each card twice (except Jacks)
          const card = { suit, value };
          deck.push(card);
          if (duplicatevalues && value !== 'J') {
            deck.push({ ...card });
          }
        }
      }
    }
    
    return this.shuffleDeck(deck);
  }

  private static shuffleDeck(deck: Card[]): Card[] {
    const shuffled = [...deck];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  private static isValidMove(state: GameState, card: Card, position: Position): boolean {
    const { x, y } = position;

    // Check if position is within bounds
    if (x < 0 || x >= BOARD_SIZE || y < 0 || y >= BOARD_SIZE) {
      return false;
    }

    // Check if position is already taken
    if (state.chips[y][x] !== null) {
      return false;
    }

    // Check if it's a corner (free space)
    if (CORNER_POSITIONS.some(pos => pos.x === x && pos.y === y)) {
      return true;
    }

    // Get the card at the board position
    const boardCard = state.board[y][x];
    if (!boardCard) {
      return false;
    }

    // Check if player has the card
    const player = state.players[state.currentPlayerIndex];
    const hasCard = player.cards.some(c => 
      c.suit === card.suit && c.value === card.value
    );

    if (!hasCard) {
      return false;
    }

    // Handle Jacks
    if (card.value === 'J') {
      if (card.suit === 'hearts' || card.suit === 'diamonds') {
        // One-eyed Jack (remove any chip)
        return state.chips[y][x] !== null;
      } else {
        // Two-eyed Jack (place chip anywhere)
        return state.chips[y][x] === null;
      }
    }

    // Normal card - must match the board position
    return boardCard.suit === card.suit && boardCard.value === card.value;
  }

  private static checkWinCondition(chips: Array<Array<string | null>>, playerColor: string): boolean {
    // Check horizontal sequences
    for (let y = 0; y < BOARD_SIZE; y++) {
      for (let x = 0; x <= BOARD_SIZE - SEQUENCE_LENGTH; x++) {
        if (this.checkSequence(chips, x, y, 1, 0, playerColor)) {
          return true;
        }
      }
    }

    // Check vertical sequences
    for (let y = 0; y <= BOARD_SIZE - SEQUENCE_LENGTH; y++) {
      for (let x = 0; x < BOARD_SIZE; x++) {
        if (this.checkSequence(chips, x, y, 0, 1, playerColor)) {
          return true;
        }
      }
    }

    // Check diagonal sequences (top-left to bottom-right)
    for (let y = 0; y <= BOARD_SIZE - SEQUENCE_LENGTH; y++) {
      for (let x = 0; x <= BOARD_SIZE - SEQUENCE_LENGTH; x++) {
        if (this.checkSequence(chips, x, y, 1, 1, playerColor)) {
          return true;
        }
      }
    }

    // Check diagonal sequences (top-right to bottom-left)
    for (let y = 0; y <= BOARD_SIZE - SEQUENCE_LENGTH; y++) {
      for (let x = SEQUENCE_LENGTH - 1; x < BOARD_SIZE; x++) {
        if (this.checkSequence(chips, x, y, -1, 1, playerColor)) {
          return true;
        }
      }
    }

    return false;
  }

  private static checkSequence(
    chips: Array<Array<string | null>>,
    startX: number,
    startY: number,
    dx: number,
    dy: number,
    playerColor: string
  ): boolean {
    for (let i = 0; i < SEQUENCE_LENGTH; i++) {
      const x = startX + i * dx;
      const y = startY + i * dy;
      if (chips[y][x] !== playerColor) {
        return false;
      }
    }
    return true;
  }
}

================
File: src/server/models/user.ts
================
import bcrypt from 'bcrypt';
import { db } from '../config/database';
import jwt from 'jsonwebtoken';
import session from 'express-session';

declare module 'express-session' {
  export interface SessionData {
    user: {
      id: string; // Use string since IDs are usually UUIDs
      username: string;
      email: string;
      gravatar: string;
    };
  }
}


export interface User {
  id: string;
  username: string;
  email: string;
  password_hash: string;
  created_at: Date;
  updated_at: Date;
}

export interface UserCreateInput {
  username: string;
  email: string;
  password: string;
  gravatar: string;
}

export interface UserLoginInput {
  email: string;
  password: string;
}

export class UserModel {
  private static readonly SALT_ROUNDS = 10;

  /**
   * Create a new user
   */
  static async create({ username, email, password, gravatar }: UserCreateInput): Promise<User> {
    const password_hash = await bcrypt.hash(password, this.SALT_ROUNDS);
    return db.one<User>(
        `
    INSERT INTO users (username, email, password_hash, gravatar)
    VALUES ($1, $2, $3, $4)
    RETURNING id, username, email, gravatar
    `,
        [username, email, password_hash, gravatar]
    );
  }

  /**
   * Find a user by their ID
   */
  static async findById(id: string): Promise<User | null> {
    return db.oneOrNone<User>('SELECT * FROM users WHERE id = $1', [id]);
  }

  /**
   * Find a user by their username
   */
  static async findByUsername(username: string): Promise<User | null> {
    return db.oneOrNone<User>('SELECT * FROM users WHERE username = $1', [username]);
  }

  /**
   * Find a user by their email
   */
  static async findByEmail(email: string): Promise<User | null> {
    return db.oneOrNone<User>(
        'SELECT id, username, email, gravatar, password_hash FROM users WHERE email = $1',
        [email]
    );
  }

  /**
   * Authenticate a user and return JWT tokens if successful
   */
  static async authenticate({ email, password }: UserLoginInput): Promise<{ 
    user: Omit<User, 'password_hash'>,
    token: string,
    refreshToken: string 
  } | null> {
    const user = await this.findByEmail(email);
    
    if (!user) {
      return null;
    }

    const isValid = await bcrypt.compare(password, user.password_hash);
    
    if (!isValid) {
      return null;
    }

    const token = jwt.sign(
      { userId: user.id },
      process.env.JWT_SECRET!,
      { expiresIn: process.env.JWT_EXPIRY || "24" }
    );

    const refreshToken = jwt.sign(
      { userId: user.id, type: 'refresh' },
      process.env.JWT_SECRET!,
      { expiresIn: process.env.JWT_REFRESH_EXPIRY || "7d" }
    );

    const { password_hash, ...userWithoutPassword } = user;
    
    return {
      user: userWithoutPassword,
      token,
      refreshToken
    };
  }

  /**
   * Refresh a JWT token
   */
  static async refreshToken(refreshToken: string): Promise<{ token: string } | null> {
    try {
      const decoded = jwt.verify(refreshToken, process.env.JWT_SECRET!) as { userId: string, type: string };
      
      if (decoded.type !== 'refresh') {
        return null;
      }

      const user = await this.findById(decoded.userId);
      
      if (!user) {
        return null;
      }

      const token = jwt.sign(
        { userId: user.id },
        process.env.JWT_SECRET!,
        { expiresIn: process.env.JWT_EXPIRY || "24h"}
      );

      return { token };
    } catch (error) {
      return null;
    }
  }

  /**
   * Update a user's information
   */
  static async update(
    id: string,
    updates: Partial<Omit<UserCreateInput, 'password'> & { password?: string }>
  ): Promise<User> {
    const updateFields: string[] = [];
    const values: any[] = [];
    let valueIndex = 1;

    if (updates.username) {
      updateFields.push(`username = $${valueIndex}`);
      values.push(updates.username);
      valueIndex++;
    }

    if (updates.email) {
      updateFields.push(`email = $${valueIndex}`);
      values.push(updates.email);
      valueIndex++;
    }

    if (updates.password) {
      const password_hash = await bcrypt.hash(updates.password, this.SALT_ROUNDS);
      updateFields.push(`password_hash = $${valueIndex}`);
      values.push(password_hash);
      valueIndex++;
    }

    values.push(id);

    return db.one<User>(
      `
      UPDATE users
      SET ${updateFields.join(', ')}
      WHERE id = $${valueIndex}
      RETURNING *
      `,
      values
    );
  }
}

================
File: src/server/routes/auth.ts
================
import express, { Router, Request, Response, NextFunction } from 'express';
import { check, validationResult } from 'express-validator';
import { UserModel } from '../models/user';
import { authenticate } from '../middleware/auth';

const router = Router();

// Validation middleware
const registerValidation = [
  check('username').notEmpty().trim().escape(),
  check('email').isEmail().normalizeEmail(),
  check('password').isLength({ min: 6 })
];

const loginValidation = [
  check('email').isEmail().normalizeEmail(),
  check('password').notEmpty()
];

// GET register page
router.get('/register', (_req: Request, res: Response) => {
  res.render('auth/register', { title: 'Register' });
});

// GET login page
router.get('/login', (_req: Request, res: Response) => {
  res.render('auth/login', { title: 'Login' });
});

// Register route
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const gravatarUrl = `https://www.gravatar.com/avatar/${crypto
        .createHash('md5')
        .update(email.trim().toLowerCase())
        .digest('hex')}?d=identicon`;

    const user = await UserModel.create({
      username,
      email,
      password,
      gravatar: gravatarUrl,
    });

    req.session.user = {
      id: user.id,
      username: user.username,
      email: user.email,
      gravatar: user.gravatar,
    };

    res.redirect('/');
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).render('auth/register', { error: 'Internal Server Error' });
  }
});


// Login route
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await UserModel.findByEmail(email);
    if (!user) {
      return res.status(401).render('auth/login', { error: 'Invalid credentials' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    if (!isPasswordValid) {
      return res.status(401).render('auth/login', { error: 'Invalid credentials' });
    }

    // Ensure gravatar is included in the session
    const { password_hash, ...userWithoutPassword } = user;
    req.session.user = {
      ...userWithoutPassword,
      gravatar: user.gravatar || 'default_gravatar_url', // Use default if gravatar is missing
    };

    res.redirect('/');
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).render('auth/login', { error: 'Internal Server Error' });
  }
});


// Get current user route
router.get('/me', authenticate, async (req: Request, res: Response) => {
  const user = await UserModel.findById(req.user!.id);
  if (!user) {
    res.status(404).json({ error: 'User not found' });
    return;
  }
  const { password_hash, ...userWithoutPassword } = user;
  res.json(userWithoutPassword);
});

export default router;

================
File: src/server/routes/chat.ts
================
import express from "express";

const router = express.Router();

router.post("/:roomId", (request, response) => {
  const { roomId } = request.params;
  const { message } = request.body;

  // @ts-expect-error TODO: Define the session type for the user object
  const { email, gravatar } = request.session.user;

  request.app.get("io").to(`game-${roomId}`).emit(`message:${roomId}`, {
    message,
    gravatar,
    sender: email,
    timestamp: new Date(),
  });

  response.status(200).send();
});

export default router;

================
File: src/server/routes/game-middleware/broadcast-game-update.ts
================
import { NextFunction, Request, Response } from "express";
import { Games } from "../../db";

export const broadcastGameUpdate = async (
  request: Request,
  response: Response,
  next: NextFunction,
) => {
  const gameId = parseInt(request.params.gameId, 10);

  const playerData = await Games.getPlayers(gameId);

  const socket = request.app.get("io");

  for (let index = 0; index < playerData.length; index++) {
    const player = playerData[index];

    socket.to(`user-${player.id}`).emit(`game:${gameId}:updated`, {
      players: playerData.filter((p) => p.id !== player.id),
      player: {
        ...playerData.find((p) => p.id === player.id),
        hand: await Games.getPlayerHand(gameId, player.id),
      },
    });
  }

  next();
};

================
File: src/server/routes/game-middleware/can-player-draw.ts
================
import { NextFunction, Request, Response } from "express";
import { Games } from "../../db";

export const canPlayerDraw = async (
  request: Request,
  response: Response,
  next: NextFunction,
) => {
  const gameId = parseInt(request.params.gameId, 10);
  // @ts-expect-error TODO: Define the session type for the user object
  const { id: userId } = request.session.user;

  const { turn: currentGameTurn } = await Games.getTurn(gameId);
  const { last_draw_turn: lastDrawTurn } = await Games.getLastDrawTurn(
    gameId,
    userId,
  );
  const socket = request.app.get("io");

  if (currentGameTurn === lastDrawTurn) {
    response.status(401);

    socket.to(`user-${userId}`).emit(`message:${gameId}`, {
      message: "You have already drawn a card this turn",
      sender: "system",
      gravatar: "123456789?d=robohash",
      timestamp: new Date(),
    });

    return;
  } else {
    next();
  }
};

================
File: src/server/routes/game-middleware/index.ts
================
export { isPlayersTurn } from "./is-players-turn";
export { canPlayerDraw } from "./can-player-draw";
export { broadcastGameUpdate } from "./broadcast-game-update";

================
File: src/server/routes/game-middleware/is-players-turn.ts
================
import { NextFunction, Request, Response } from "express";
import { Games } from "../../db";

export const isPlayersTurn = async (
  request: Request,
  response: Response,
  next: NextFunction,
) => {
  const gameId = parseInt(request.params.gameId, 10);

  if (!gameId) {
    response.sendStatus(400);
    return;
  }

  // @ts-expect-error TODO: Define the session type for the user object
  const { id: userId } = request.session.user;
  const socket = request.app.get("io");

  const { is_current_player: isCurrentPlayer } = await Games.isCurrentPlayer(
    gameId,
    userId,
  );

  if (!isCurrentPlayer) {
    response.sendStatus(401);

    socket.to(`user-${userId}`).emit(`message:${gameId}`, {
      message: "You can not play when it is not your turn",
      sender: "system",
      gravatar: "123456789?d=robohash",
      timestamp: new Date(),
    });

    return;
  } else {
    next();
  }
};

================
File: src/server/routes/games.ts
================
import { Router, Request, Response, NextFunction } from 'express';
import { body, check, validationResult } from 'express-validator';
import { GameModel } from '../models/game';
import { authenticate } from '../middleware/auth';
import { io } from "../index";


const router = Router();

// Validation middleware
const gameValidation = [
  check('position').isObject().withMessage('Position must be an object'),
  check('position.x').isInt({ min: 0, max: 9 }).withMessage('X position must be between 0 and 9'),
  check('position.y').isInt({ min: 0, max: 9 }).withMessage('Y position must be between 0 and 9'),
  check('cardId').isString().notEmpty().withMessage('Card ID is required')
];

// Create a new game
router.post('/', authenticate, async (req: Request, res: Response, next: NextFunction) => {
  try {
    // Create a new game using the GameModel
    const game = await GameModel.create(req.user!.id);

    // Emit a "game-created" event to all connected clients
    io.emit('game-created', {
      id: game.id,
      players: 1,
      player_count: game.state.player_count,
    });

    // Respond with the created game details
    res.status(201).json(game);
  } catch (err) {
    next(err);
  }
});

// Join a game
router.post('/:id/join', authenticate, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const gameState = await GameModel.join(req.params.id, req.user!.id);
    res.json(gameState);
  } catch (err) {
    next(err);
  }
});

// Start a game
router.post('/:id/start', authenticate, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const gameState = await GameModel.start(req.params.id);
    res.json(gameState);
  } catch (err) {
    next(err);
  }
});
// Make a move
router.post('/:id/play', authenticate, gameValidation, async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      res.status(400).json({ errors: errors.array() });
      return;
    }

    const { position, cardId } = req.body;
    const gameState = await GameModel.makeMove(req.params.id, req.user!.id, cardId, position);
    res.json(gameState);
  } catch (err) {
    next(err);
  }
});

// Get game state
router.get('/:id', authenticate, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const gameState = await GameModel.getState(req.params.id);
    res.json(gameState);
  } catch (err) {
    next(err);
  }
});

// List available games
router.get('/', authenticate, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const games = await GameModel.listGames();
    res.json(games);
  } catch (err) {
    next(err);
  }
});

// get create game page
router.get('/create', authenticate, (req: Request, res: Response) => {
  res.render('games/create-game'); // Adjust path if needed
});


export default router;

================
File: src/server/routes/home.ts
================
import express from "express";

const router = express.Router();

router.get("/", (_request, response) => {
  response.render("home", { title: "Welcome" });
});

export default router;

================
File: src/server/routes/index.ts
================
export { default as auth } from "./auth";
export { default as chat } from "./chat";
export { default as games } from "./games";
export { default as home } from "./home";
export { default as mainLobby } from "./main-lobby";
export { default as test } from "./test";

================
File: src/server/routes/main-lobby.ts
================
import express from "express";
import { GameModel } from "../models/game";

const router = express.Router();

interface Game {
  id: string;
  players: number;
  player_count: number;
  [key: string]: any;
}

router.get("/", async (request, response, next) => {
  try {
    const user = request.session.user;

    // Redirect guests to login
    if (!user) {
      return response.redirect("/auth/login");
    }

    // Fetch available games
    const availableGames = await GameModel.availableGames();

    // Fetch games the user has joined
    const playerGames = await GameModel.playerGames(user.id.toString());

    // Add currentPlayerIsMember flag to each game
    const gamesWithMembershipFlag = availableGames.map((game: Game) => ({
      ...game,
      currentPlayerIsMember: Boolean(playerGames[game.id]),
    }));

    // Render main lobby
    response.render("main-lobby", {
      title: "Game Lobby",
      user,
      availableGames: gamesWithMembershipFlag,
    });
  } catch (error) {
    console.error("Error fetching games:", error);
    next(error); // Pass error to the global error handler
  }
});

export default router;

================
File: src/server/routes/test.ts
================
import express from "express";
import db from "../db/connection";

const router = express.Router();

router.get("/db", async (_request, response) => {
  try {
    await db.any(`INSERT INTO test (test_string) VALUES ($1)`, [
      `Hello on ${new Date().toLocaleString()}`,
    ]);

    const results = await db.any(`SELECT * FROM test`);

    response.json(results);
  } catch (error) {
    // @ts-expect-error TODO: Fix this typing so I can use `any` in catch statements
    response.status(500).json({ error: error.message });
  }
});

export default router;

================
File: src/server/socket/gameHandlers.ts
================
import { Server, Socket } from 'socket.io';
import { ExtendedError } from 'socket.io/dist/namespace';
import { GameModel } from '../models/game';
import { verifyToken } from '../middleware/auth';
import {
  GameSocket,
  ServerToClientEvents,
  ClientToServerEvents,
  InterServerEvents,
  SocketData
} from '../types/socket';

export const configureGameHandlers = (
  io: Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>
) => {
  // Authentication middleware
  io.use(async (socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>, next) => {
    try {
      const token = socket.handshake.auth.token;
      if (!token) {
        return next(new Error('Authentication required'));
      }

      const user = await verifyToken(token);
      if (!user) {
        return next(new Error('Invalid token'));
      }

      const gameSocket = socket as GameSocket;
      gameSocket.userId = user.id;
      gameSocket.gameRooms = new Map();
      next();
    } catch (err) {
      next(err instanceof Error ? err : new Error('Authentication failed'));
    }
  });

  // Connection handler
  io.on('connection', (socket: Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>) => {
    const gameSocket = socket as GameSocket;
    console.log(`User ${gameSocket.userId} connected`);

    gameSocket.on('joinGame', async (gameId: string) => {
      try {
        const gameState = await GameModel.getState(gameId);
        
        // Add socket to game room
        gameSocket.join(gameId);
        gameSocket.gameRooms.set(gameId, {
          id: gameId,
          players: gameState.players.map(p => p.id),
          spectators: [],
          gameState
        });

        // Notify other players
        gameSocket.to(gameId).emit('playerJoined', gameSocket.userId!);
        
        // Send initial game state
        io.to(gameId).emit('gameUpdate', gameState);
      } catch (err) {
        gameSocket.emit('gameError', err instanceof Error ? err.message : 'Failed to join game');
      }
    });

    gameSocket.on('leaveGame', (gameId: string) => {
      gameSocket.leave(gameId);
      gameSocket.gameRooms.delete(gameId);
      gameSocket.to(gameId).emit('playerLeft', gameSocket.userId!);
    });

    gameSocket.on('playCard', async (gameId: string, cardId: string, position: { x: number; y: number }) => {
      try {
        const [suit, value] = cardId.split('');
        const card = { suit, value };
        const gameState = await GameModel.makeMove(gameId, gameSocket.userId!, card, position);
        io.to(gameId).emit('gameUpdate', gameState);
      } catch (err) {
        gameSocket.emit('gameError', err instanceof Error ? err.message : 'Failed to play card');
      }
    });

    gameSocket.on('disconnect', () => {
      console.log(`User ${gameSocket.userId} disconnected`);
      // Clean up game rooms
      gameSocket.gameRooms.forEach((room, gameId) => {
        gameSocket.to(gameId).emit('playerLeft', gameSocket.userId!);
      });
    });
  });
};

================
File: src/server/types/express-session.d.ts
================
import session from 'express-session';

declare module 'express-session' {
  export interface SessionData {
    user: { [key: string]: any };
  }
}

================
File: src/server/types/socket.ts
================
import { Socket } from 'socket.io';
import { DefaultEventsMap } from 'socket.io/dist/typed-events';

export interface GameRoom {
  id: string;
  players: string[];
  spectators: string[];
  gameState: any; // Replace with your game state type
}

export interface GameSocket extends Socket<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData> {
  gameRooms: Map<string, GameRoom>;
  userId?: string;
}

export interface ServerToClientEvents {
  gameUpdate: (gameState: any) => void;
  playerJoined: (playerId: string) => void;
  playerLeft: (playerId: string) => void;
  gameError: (error: string) => void;
}

export interface ClientToServerEvents {
  joinGame: (gameId: string) => void;
  leaveGame: (gameId: string) => void;
  playCard: (gameId: string, cardId: string, position: { x: number; y: number }) => void;
}

export interface InterServerEvents {
  ping: () => void;
}

export interface SocketData {
  userId: string;
  gameRooms: Map<string, GameRoom>;
}

================
File: src/server/views/auth/login.ejs
================
<% if (messages.error) { %>
  <p class="text-red-500"><%= messages.error %></p>
<% } %>

<form method="post" action="/auth/login" class="container w-[50%] mx-auto">
  <div class="mb-[8px]">
    <label for="email">Email</label>
    <div class="pt-[2px]">
      <input
        type="email"
        id="email"
        name="email"
        placeholder="you@domain.com"
        required
        class="block w-full px-2 rounded-md border-0 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-[2px] focus:ring-inset"
      />
    </div>
  </div>  
  <div class="mb-[8px]">
    <label for="password">Password</label>
    <div class="pt-[2px]">
      <input 
        type="password" 
        id="password" 
        name="password" 
        required 
        class="block w-full px-2 rounded-md border-0 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-[2px] focus:ring-inset" />
    </div>
  </div>
  <div>
    <button 
      type="submit"
      class="w-full rounded-md bg-blue-300 px-3 mt-[8px]"
    >Login</button>
    <a href="/auth/register" class="block text-center mt-[8px]">Register</a>
  </div>
</form>

================
File: src/server/views/auth/register.ejs
================
<!doctype html>
<html lang="en">
  <%- include('../partials/head') %>
  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('../partials/menu') %>

      <section>
        <form
          method="post"
          action="/auth/register"
          class="container w-[50%] mx-auto"
        >
          <div class="mb-[8px]">
            <label for="username">Username</label>
            <input
              type="username"
              id="username"
              name="username"
              placeholder="Choose your username"
              required
              class="block w-full px-2 rounded-md border-0 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-[2px] focus:ring-inset"
            />
          </div>
          <div class="mb-[8px]">
            <label for="email">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              placeholder="you@domain.com"
              required
              class="block w-full px-2 rounded-md border-0 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-[2px] focus:ring-inset"
            />
          </div>
          <div class="mb-[8px]">
            <label for="password">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              required
              class="block w-full px-2 rounded-md border-0 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-[2px] focus:ring-inset"
            />
          </div>
          <div class="mb-[8px]">
            <button
              type="submit"
              class="w-full rounded-md bg-blue-300 px-3 mt-[8px]"
            >
              Register
            </button>
            <a href="/" class="block text-center mt-[8px]">Login</a>
          </div>
        </form>
      </section>
    </div>
  </body>
</html>

================
File: src/server/views/games/game.ejs
================
<!doctype html>
<html lang="en">
  <%- include ('../partials/head') %>
  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('../partials/menu') %>

      <div class="flex flex-row">
        <section class="basis-4/6 mr-[20px]">
          <div
            id="opponent-area"
            class="w-[100%] flex flex-row justify-around min-h-[100px]"
          ></div>
          <div id="playing-table">
            <div class="w-[60%] flex flex-row justify-between mx-auto">
              <div
                class="card back"
                id="draw-pile"
                data-game-id="<%= gameId %>"
              ></div>

              <div class="card blank" id="play-pile-n"></div>
              <div class="card blank" id="play-pile-w"></div>
              <div class="card blank" id="play-pile-e"></div>
              <div class="card blank" id="play-pile-s"></div>
            </div>
            <div
              id="player-area"
              class="w-[100%] flex flex-row justify-around"
            ></div>
          </div>
        </section>

        <%- include('./templates') %>
        <script src="/js/main.js"></script>
        <div class="basis-2/6"><%- include('../partials/chat') %></div>
        <script src="/js/games.js"></script>
      </div>
    </div>
  </body>
</html>

================
File: src/server/views/games/lobby.ejs
================
<!doctype html>
<html lang="en">
  <%- include ('../partials/head') %>
  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('../partials/menu') %>
      <section>
        <div class="flex flex-row">
          <section class="basis-4/6 mr-[20px]">
            Lobby page for game <%= gameId %>
          </section>
          <div class="basis-2/6"><%- include('../partials/chat') %></div>
        </div>
      </section>

      <%- include('../partials/footer') %>
      <script src="/js/game-lobby.js"></script>
    </div>
  </body>
</html>

================
File: src/server/views/games/templates.ejs
================
<template id="card-template">
  <div class="card">
    <span></span>
  </div>
</template>

<template id="player-template">
  <div class="player mt-[10px] rounded-md p-[10px]">
    <h4 class="flex flex-row justify-start items-center">
      <img class="gravatar w-[20px] h-[20px] rounded-[10px] mx-[10px]" />
      <div class="flex flex-col">
        <span class="username"></span>
        <span class="card-count text-[8px] font-light"></span>
      </div>
    </h4>
    <div class="flex flex-row justify-between">
      <div class="flex flex-row hand scale-75"></div>
      <div class="flex flex-row scale-75">
        <div class="player-pile-0 mr-[8px]">
          <div class="card back"></div>
          <span class="absolute bottom-0 mb-[-20px]"></span>
        </div>
        <div class="player-pile-1 mr-[8px]"></div>
        <div class="player-pile-2 mr-[8px]"></div>
        <div class="player-pile-3 mr-[8px]"></div>
        <div class="player-pile-4"></div>
      </div>
    </div>
  </div>
</template>

================
File: src/server/views/home.ejs
================
<!doctype html>
<html lang="en">
  <%- include('partials/head') %>

  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('partials/menu') %>

      <section class="container"><%- include('auth/login') %></section>
    </div>
  </body>
</html>

================
File: src/server/views/main-lobby.ejs
================
<% if (!availableGames || availableGames.length === 0) { %>
  <p class="text-center text-gray-500">No games are currently available. Create a new game to get started!</p>
<% } else { %>
  <table class="min-w-full">
    <thead>
    <tr>
      <th class="text-left border-b-[1px] border-gray-400 py-[4px]">Room name</th>
      <th class="text-left border-b-[1px] border-gray-400 py-[4px]">Players</th>
      <th class="text-center border-b-[1px] border-gray-400 py-[4px]">Join</th>
    </tr>
    </thead>
    <tbody id="available-games-list">
    <% availableGames.forEach((room) => { %>
      <tr id="game-row-<%= room.id %>">
        <td class="border-b-[1px] border-gray-400 py-[4px]">Game <%= room.id %></td>
        <td class="border-b-[1px] border-gray-400 py-[4px]"><%= room.players %> / <%= room.player_count %></td>
        <td class="text-center border-b-[1px] border-gray-400 py-[4px]">
          <% if (room.currentPlayerIsMember) { %>
            <form action="/games/<%= room.id %>/resume" method="get">
              <button class="bg-green-500 text-white py-1 px-2 rounded-sm hover:bg-green-700">Resume</button>
            </form>
          <% } else { %>
            <form action="/games/join/<%= room.id %>" method="post">
              <button class="bg-blue-500 text-white py-1 px-2 rounded-sm hover:bg-blue-700">Join</button>
            </form>
          <% } %>
        </td>
      </tr>
    <% }); %>
    </tbody>
  </table>
<% } %>

================
File: src/server/views/partials/chat.ejs
================
<template id="chat-message-template">
  <li class="chat-message flex flex-row items-center">
    <img class="gravatar w-[16px] h-[16px] rounded-[8px] mr-[4px] self-start" />
    <span class="content text-[8px] text-gray-700"></span>
  </li>
</template>

<aside id="chat-section" class="h-[300px] flex flex-col">
  <ul
    id="messages"
    class="rounded-md border-[1px] border-gray-300 w-full grow p-[4px] overflow-y-auto"
  ></ul>
  <form method="post" class="flex flex-row h-[20px] mt-[8px]">
    <input
      id="chat-message"
      autocomplete="off"
      placeholder="Type your message here"
      class="border-[1px] border-gray-300 mr-[4px] block grow rounded-sm text-[10px] px-1"
    /><button class="w-[30px] text-[8px] bg-blue-200 rounded-sm px-1">
      Send
    </button>
  </form>
</aside>
<script src="/js/chat.js"></script>

================
File: src/server/views/partials/head.ejs
================
<head>
  <link rel="stylesheet" href="css/bundle.css" />

  <title>Yas Kween - <%= title %></title>
  <script src="/js/main.js"></script>
  <script>
    window.roomId = "<%= roomId %>";
  </script>
</head>

================
File: src/server/views/partials/menu.ejs
================
<nav class="pt-[10px] flex flex-row justify-between mb-[20px]" %>">
  <a href="<%= locals.user === undefined ? "/" : "/lobby" %>">
    <img src="/images/logo.webp" alt="logo" class="w-[40px] h-[40px] rounded-[20px]"/>
  </a>
  <% if(locals.user !== undefined) { %>
    <div class="flex flex-row items-center">
      <a href="/logout">Logout</a>
      <img src="https://gravatar.com/avatar/<%= locals.user.gravatar %>" alt="Gravatar of <%= locals.user.username %>" class="w-[40px] h-[40px] rounded-[20px] ml-[10px]"/>
    </div>
  <% } %>
</nav>

================
File: src/views/auth/login.ejs
================
<!DOCTYPE html>
<html lang="en">
  <%- include('../partials/head') %>
  <body class="bg-gray-800 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <div class="bg-gray-700 rounded-lg p-8 text-white">
        <h1 class="text-4xl font-bold mb-4 text-center">Login</h1>
        <% if (typeof error !== 'undefined') { %>
          <div class="bg-red-500 text-white p-3 rounded mb-4">
            <%= error %>
          </div>
        <% } %>
        <form method="post" action="/auth/login" class="space-y-4">
          <div>
            <label for="email" class="block text-sm font-medium">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="mt-1 block w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              value="<%= typeof values !== 'undefined' ? values.email : '' %>"
            />
          </div>
          <div>
            <label for="password" class="block text-sm font-medium">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              required
              class="mt-1 block w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <button
              type="submit"
              class="w-full bg-blue-500 text-white rounded-md py-2 px-4 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Login
            </button>
          </div>
        </form>
        <div class="mt-4 text-center">
          <p>Don't have an account? <a href="/auth/register" class="text-blue-400 hover:text-blue-300">Register here</a></p>
        </div>
      </div>
    </div>
  </body>
</html>

================
File: src/views/auth/register.ejs
================
<!DOCTYPE html>
<html lang="en">
  <%- include('../partials/head') %>
  <body class="bg-gray-800 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <div class="bg-gray-700 rounded-lg p-8 text-white">
        <h1 class="text-4xl font-bold mb-4 text-center">Register</h1>
        <% if (typeof error !== 'undefined') { %>
          <div class="bg-red-500 text-white p-3 rounded mb-4">
            <%= error %>
          </div>
        <% } %>
        <form method="post" action="/auth/register" class="space-y-4">
          <div>
            <label for="username" class="block text-sm font-medium">Username</label>
            <input
              type="text"
              id="username"
              name="username"
              required
              class="mt-1 block w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label for="email" class="block text-sm font-medium">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="mt-1 block w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label for="password" class="block text-sm font-medium">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              required
              minlength="6"
              class="mt-1 block w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <button
              type="submit"
              class="w-full bg-blue-500 text-white rounded-md py-2 px-4 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Register
            </button>
          </div>
        </form>
        <div class="mt-4 text-center">
          <p>Already have an account? <a href="/auth/login" class="text-blue-400 hover:text-blue-300">Login here</a></p>
        </div>
      </div>
    </div>
  </body>
</html>

================
File: src/views/games/create-game.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Game</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body class="bg-gray-800 text-white min-h-screen flex justify-center items-center">
<div class="container max-w-md bg-gray-700 rounded-lg shadow-lg p-8">
    <h1 class="text-2xl font-bold mb-4 text-center">Create a New Game</h1>
    <form action="/games/create" method="POST" class="space-y-4">
        <!-- Game Name -->
        <div>
            <label for="name" class="block font-medium mb-1">Game Name</label>
            <input
                    type="text"
                    id="name"
                    name="name"
                    class="w-full px-3 py-2 border border-gray-600 rounded bg-gray-800 text-white"
                    placeholder="Enter game name"
                    required
            />
        </div>

        <!-- Max Players -->
        <div>
            <label for="maxPlayers" class="block font-medium mb-1">Max Players</label>
            <input
                    type="number"
                    id="maxPlayers"
                    name="maxPlayers"
                    class="w-full px-3 py-2 border border-gray-600 rounded bg-gray-800 text-white"
                    placeholder="Enter max players (e.g., 4)"
                    min="2"
                    max="10"
                    required
            />
        </div>

        <!-- Submit Button -->
        <button
                type="submit"
                class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
            Create Game
        </button>
    </form>
</div>
</body>
</html>

================
File: src/views/games/game.ejs
================
<!doctype html>
<html lang="en">
  <%- include ('../partials/head') %>
  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('../partials/menu') %>

      <div class="flex flex-row">
        <section class="basis-4/6 mr-[20px]">
          <div
            id="opponent-area"
            class="w-[100%] flex flex-row justify-around min-h-[100px]"
          ></div>
          <div id="playing-table">
            <div class="w-[60%] flex flex-row justify-between mx-auto">
              <div
                class="card back"
                id="draw-pile"
                data-game-id="<%= gameId %>"
              ></div>

              <div class="card blank" id="play-pile-n"></div>
              <div class="card blank" id="play-pile-w"></div>
              <div class="card blank" id="play-pile-e"></div>
              <div class="card blank" id="play-pile-s"></div>
            </div>
            <div
              id="player-area"
              class="w-[100%] flex flex-row justify-around"
            ></div>
          </div>
        </section>

        <%- include('./templates') %>
        <script src="/js/main.js"></script>
        <div class="basis-2/6"><%- include('../partials/chat') %></div>
        <script src="/js/games.js"></script>
      </div>
    </div>
  </body>
</html>

================
File: src/views/games/lobby.ejs
================
<!doctype html>
<html lang="en">
  <%- include ('../partials/head') %>
  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('../partials/menu') %>
      <section>
        <div class="flex flex-row">
          <section class="basis-4/6 mr-[20px]">
            Lobby page for game <%= gameId %>
          </section>
          <div class="basis-2/6"><%- include('../partials/chat') %></div>
        </div>
      </section>

      <%- include('../partials/footer') %>
      <script src="/js/game-lobby.js"></script>
    </div>
  </body>
</html>

================
File: src/views/games/templates.ejs
================
<template id="card-template">
  <div class="card">
    <span></span>
  </div>
</template>

<template id="player-template">
  <div class="player mt-[10px] rounded-md p-[10px]">
    <h4 class="flex flex-row justify-start items-center">
      <img class="gravatar w-[20px] h-[20px] rounded-[10px] mx-[10px]" />
      <div class="flex flex-col">
        <span class="username"></span>
        <span class="card-count text-[8px] font-light"></span>
      </div>
    </h4>
    <div class="flex flex-row justify-between">
      <div class="flex flex-row hand scale-75"></div>
      <div class="flex flex-row scale-75">
        <div class="player-pile-0 mr-[8px]">
          <div class="card back"></div>
          <span class="absolute bottom-0 mb-[-20px]"></span>
        </div>
        <div class="player-pile-1 mr-[8px]"></div>
        <div class="player-pile-2 mr-[8px]"></div>
        <div class="player-pile-3 mr-[8px]"></div>
        <div class="player-pile-4"></div>
      </div>
    </div>
  </div>
</template>

================
File: src/views/home.ejs
================
<!doctype html>
<html lang="en">
  <%- include('partials/head') %>

  <body class="text-[12px]">
    <div class="container mx-auto">
      <%- include('partials/menu') %>

      <section class="container"><%- include('auth/login') %></section>
    </div>
  </body>
</html>

================
File: src/views/home.ejs2
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Sequence Game</title>
    <link href="/styles.css" rel="stylesheet">
</head>
<body class="bg-gray-800 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="bg-gray-700 rounded-lg p-8 text-white text-center">
            <h1 class="text-4xl font-bold mb-4">Welcome to Sequence</h1>
            <p class="mb-8">Please log in or create an account to start playing.</p>
            <div class="flex justify-center gap-4">
                <a href="/auth/login" class="px-6 py-3 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Login
                </a>
                <a href="/auth/register" class="px-6 py-3 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                    Register
                </a>
            </div>
        </div>
    </div>
</body>
</html>

================
File: src/views/main-lobby.ejs
================
<!DOCTYPE html>
<html lang="en">
  <%- include('partials/head') %>
  <body class="bg-gray-800 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <div class="bg-gray-700 rounded-lg p-8 text-white">
        <div class="flex justify-between items-center mb-8">
          <h1 class="text-4xl font-bold">Welcome, <%= user?.username %></h1>
          <a href="/auth/logout" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Logout</a>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <!-- Available Games -->
          <div>
            <h2 class="text-2xl font-bold mb-4">Available Games</h2>
            <div class="space-y-4">
              <% if (availableGames && availableGames.length > 0) { %>
                <% availableGames.forEach(function(game) { %>
                  <div class="bg-gray-600 p-4 rounded">
                    <div class="flex justify-between items-center">
                      <div>
                        <h3 class="font-bold">Game #<%= game.id %></h3>
                        <p class="text-sm">Players: <%= game.players %> / <%= game.player_count %></p>
                      </div>
                      <% if (!game.currentPlayerIsMember) { %>
                        <form action="/games/join/<%= game.id %>" method="post">
                          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                            Join Game
                          </button>
                        </form>
                      <% } else { %>
                        <a href="/games/<%= game.id %>" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                          Resume Game
                        </a>
                      <% } %>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <p>No games available.</p>
              <% } %>
            </div>
          </div>

          <!-- Create New Game -->
          <div>
            <h2 class="text-2xl font-bold mb-4">Create New Game</h2>
            <form action="/games/create" method="post">
              <button type="submit" class="w-full px-6 py-3 bg-blue-500 text-white rounded hover:bg-blue-600">
                Create New Game
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

================
File: src/views/partials/chat.ejs
================
<template id="chat-message-template">
  <li class="chat-message flex flex-row items-center">
    <img class="gravatar w-[16px] h-[16px] rounded-[8px] mr-[4px] self-start" />
    <span class="content text-[8px] text-gray-700"></span>
  </li>
</template>

<aside id="chat-section" class="h-[300px] flex flex-col">
  <ul
    id="messages"
    class="rounded-md border-[1px] border-gray-300 w-full grow p-[4px] overflow-y-auto"
  ></ul>
  <form method="post" class="flex flex-row h-[20px] mt-[8px]">
    <input
      id="chat-message"
      autocomplete="off"
      placeholder="Type your message here"
      class="border-[1px] border-gray-300 mr-[4px] block grow rounded-sm text-[10px] px-1"
    /><button class="w-[30px] text-[8px] bg-blue-200 rounded-sm px-1">
      Send
    </button>
  </form>
</aside>
<script src="/js/chat.js"></script>

================
File: src/views/partials/head.ejs
================
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/bundle.css" />

  <title>Sequence Game - <%= title %></title>
  <script src="/js/main.js"></script>
  <% if (typeof roomId !== 'undefined') { %>
  <script>
    window.roomId = "<%= roomId %>";
  </script>
  <% } %>
</head>

================
File: src/views/partials/menu.ejs
================
<nav class="pt-[10px] flex flex-row justify-between mb-[20px]" %>">
  <a href="<%= locals.user === undefined ? "/" : "/lobby" %>">
    <img src="/images/logo.webp" alt="logo" class="w-[40px] h-[40px] rounded-[20px]"/>
  </a>
  <% if(locals.user !== undefined) { %>
    <div class="flex flex-row items-center">
      <a href="/logout">Logout</a>
      <img src="https://gravatar.com/avatar/<%= locals.user.gravatar %>" alt="Gravatar of <%= locals.user.username %>" class="w-[40px] h-[40px] rounded-[20px] ml-[10px]"/>
    </div>
  <% } %>
</nav>

================
File: tailwind.config.ts
================
import { Config } from "tailwindcss";

const configuration: Config = {
  content: ["./src/**/*.{html,ejs}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

export default configuration;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2016",
    "module": "commonjs",
    "jsx": "react",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": false,
    "baseUrl": "./src",
    "paths": {
      "@/*": ["*"]
    },
    "outDir": "./dist"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}

================
File: webpack.config.js
================
"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
dotenv_1.default.config();
const mode =
  process.env.NODE_ENV === "production" ? "production" : "development";
const config = {
  entry: {
    main: path_1.default.join(process.cwd(), "src", "client", "main.ts"),
  },
  mode,
  output: {
    path: path_1.default.join(process.cwd(), "src", "public", "js"),
    filename: "[name].js",
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: "ts-loader",
        exclude: /node_modules/,
      },
    ],
  },
};
exports.default = config;

================
File: webpack.config.ts
================
import dotenv from "dotenv";
import path from "path";
import webpack from "webpack";
dotenv.config();
const mode =
  process.env.NODE_ENV === "production" ? "production" : "development";
const config: webpack.Configuration = {
  entry: {
    main: path.join(process.cwd(), "src", "client", "main.ts"),
  },
  mode,
  output: {
    path: path.join(process.cwd(), "src", "public", "js"),
    filename: "[name].js",
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: "ts-loader",
        exclude: /node_modules/,
      },
    ],
  },
};
export default config;

================
File: weekly-reports/README.md
================
Weekly report materials, when required, will be submitted in sub-directories of this folder.

-Week 2:

Link to github repository: https://github.com/sfsu-csc-667-fall-2024-roberts/term-project-team-yash-addy-raquel-and-kayla.git

Link to github project board: https://github.com/orgs/sfsu-csc-667-fall-2024-roberts/projects/19

What was accomplished this week: We did Milestone 2 which involved setting up the development environments for the back end of the project.

Milestone 2: We had to create a simple webserver that will serve as the skeleton/foundation of our site. It is incredibly basic but it involved setting up the directory structure, creating a basic express server, organizing the server code, setting up middleware and error handling, serving static files, and setting up a way to debug in the future
